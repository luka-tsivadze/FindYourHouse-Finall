{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/render/webgl/constants.js", "../../../../../../node_modules/ol/render/webgl/utils.js", "../../../../../../node_modules/ol/webgl.js", "../../../../../../node_modules/ol/webgl/Buffer.js", "../../../../../../node_modules/ol/webgl/ContextEventType.js", "../../../../../../node_modules/ol/webgl/PostProcessingPass.js", "../../../../../../node_modules/ol/webgl/Helper.js", "../../../../../../node_modules/ol/webgl/RenderTarget.js", "../../../../../../node_modules/ol/worker/webgl.js", "../../../../../../node_modules/ol/renderer/webgl/Layer.js", "../../../../../../node_modules/ol/renderer/webgl/worldUtil.js", "../../../../../../node_modules/ol/renderer/webgl/PointsLayer.js", "../../../../../../node_modules/ol/webgl/BaseTileRepresentation.js", "../../../../../../node_modules/ol/webgl/TileTexture.js", "../../../../../../node_modules/ol/renderer/webgl/TileLayerBase.js", "../../../../../../node_modules/ol/renderer/webgl/TileLayer.js", "../../../../../../node_modules/ol/webgl/PaletteTexture.js", "../../../../../../node_modules/ol/expr/gpu.js", "../../../../../../node_modules/ol/style/flat.js", "../../../../../../node_modules/ol/webgl/ShaderBuilder.js", "../../../../../../node_modules/ol/layer/Heatmap.js", "../../../../../../node_modules/ol/renderer/canvas/VectorImageLayer.js", "../../../../../../node_modules/ol/layer/VectorImage.js", "../../../../../../node_modules/ol/renderer/canvas/VectorTileLayer.js", "../../../../../../node_modules/ol/layer/VectorTile.js", "../../../../../../node_modules/ol/webgl/styleparser.js", "../../../../../../node_modules/ol/layer/WebGLPoints.js", "../../../../../../node_modules/ol/layer/WebGLTile.js", "../../../../../../node_modules/ol/render/webgl/MixedGeometryBatch.js", "../../../../../../node_modules/ol/render/webgl/renderinstructions.js", "../../../../../../node_modules/ol/render/webgl/VectorStyleRenderer.js", "../../../../../../node_modules/ol/renderer/webgl/VectorLayer.js", "../../../../../../node_modules/ol/layer/WebGLVector.js"],
  "sourcesContent": ["/**\n * @module ol/render/webgl/constants\n */\n\n/**\n * @enum {string}\n */\nexport const WebGLWorkerMessageType = {\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS'\n};\n\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {number} id Message id; will be used both in request and response as a means of identification\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions render instructions raw binary buffer.\n * @property {number} [customAttributesSize] Amount of hit detection + custom attributes count in the render instructions.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\n */", "/**\n * @module ol/render/webgl/utils\n */\nimport earcut from 'earcut';\nimport { clamp } from '../../math.js';\nimport { apply as applyTransform } from '../../transform.js';\nexport const LINESTRING_ANGLE_COSINE_CUTOFF = 0.985;\n\n/** @type {Array<number>} */\nconst tmpArray_ = [];\n\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\nconst bufferPositions_ = {\n  vertexPosition: 0,\n  indexPosition: 0\n};\n\n/**\n * @param {Float32Array} buffer Buffer\n * @param {number} pos Position\n * @param {number} x X\n * @param {number} y Y\n * @param {number} index Index\n */\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesSize, bufferPositions) {\n  // This is for x, y and index\n  const baseVertexAttrsCount = 3;\n  const baseInstructionsCount = 2;\n  const stride = baseVertexAttrsCount + customAttributesSize;\n  const x = instructions[elementIndex + 0];\n  const y = instructions[elementIndex + 1];\n\n  // read custom numerical attributes on the feature\n  const customAttrs = tmpArray_;\n  customAttrs.length = customAttributesSize;\n  for (let i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  const baseIndex = vPos / stride;\n\n  // push vertices for each of the four quad corners (first standard then custom attributes)\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n  return bufferPositions_;\n}\n\n/**\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\n * segment, in order to be able to offset the vertices correctly in the shader.\n * Join angles are between 0 and 2PI.\n * This also computes the length of the current segment and the sum of the join angle tangents in order\n * to store this information on each subsequent segment along the line. This is necessary to correctly render dashes\n * and symbols along the line.\n *\n *   pB (before)                          pA (after)\n *    X             negative             X\n *     \\             offset             /\n *      \\                              /\n *       \\   join              join   /\n *        \\ angle 0          angle 1 /\n *         \\←---                ←---/      positive\n *          \\   ←--          ←--   /        offset\n *           \\     ↑       ↓      /\n *            X────┴───────┴─────X\n *            p0                  p1\n *\n * @param {Float32Array} instructions Array of render instructions for lines.s\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\n * @param {number} segmentEndIndex Index of the segment end point from which render instructions will be read.\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {Array<number>} customAttributes Array of custom attributes value\n * @param {import('../../transform.js').Transform} toWorldTransform Transform matrix used to obtain world coordinates from instructions\n * @param {number} currentLength Cumulated length of segments processed so far\n * @param {number} currentAngleTangentSum Cumulated tangents of the join angles processed so far\n * @return {{length: number, angle: number}} Cumulated length with the newly processed segment (in world units), new sum of the join angle tangents\n * @private\n */\nexport function writeLineSegmentToBuffers(instructions, segmentStartIndex, segmentEndIndex, beforeSegmentIndex, afterSegmentIndex, vertexArray, indexArray, customAttributes, toWorldTransform, currentLength, currentAngleTangentSum) {\n  // compute the stride to determine how many vertices were already pushed\n  const baseVertexAttrsCount = 10; // base attributes: x0, y0, m0, x1, y1, m1, angle0, angle1, distance, params\n  const stride = baseVertexAttrsCount + customAttributes.length;\n  const baseIndex = vertexArray.length / stride;\n\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\n  // Depending on whether there are points before and after the segment, its final shape\n  // will be different\n  const p0 = [instructions[segmentStartIndex + 0], instructions[segmentStartIndex + 1]];\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\n  const m0 = instructions[segmentStartIndex + 2];\n  const m1 = instructions[segmentEndIndex + 2];\n\n  // to compute join angles we need to reproject coordinates back in world units\n  const p0world = applyTransform(toWorldTransform, [...p0]);\n  const p1world = applyTransform(toWorldTransform, [...p1]);\n\n  /**\n   * Compute the angle between p0pA and p0pB\n   * @param {import(\"../../coordinate.js\").Coordinate} p0 Point 0\n   * @param {import(\"../../coordinate.js\").Coordinate} pA Point A\n   * @param {import(\"../../coordinate.js\").Coordinate} pB Point B\n   * @return {number} a value in [0, 2PI]\n   */\n  function angleBetween(p0, pA, pB) {\n    const lenA = Math.sqrt((pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1]));\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\n    const orthoA = [-tangentA[1], tangentA[0]];\n    const lenB = Math.sqrt((pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1]));\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\n\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\n    const angle = lenA === 0 || lenB === 0 ? 0 : Math.acos(clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1));\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\n    return !isClockwise ? Math.PI * 2 - angle : angle;\n  }\n\n  // a negative angle indicates a line cap\n  let angle0 = -1;\n  let angle1 = -1;\n  let newAngleTangentSum = currentAngleTangentSum;\n  const joinBefore = beforeSegmentIndex !== null;\n  const joinAfter = afterSegmentIndex !== null;\n\n  // add vertices and adapt offsets for P0 in case of join\n  if (joinBefore) {\n    // B for before\n    const pB = [instructions[beforeSegmentIndex], instructions[beforeSegmentIndex + 1]];\n    const pBworld = applyTransform(toWorldTransform, [...pB]);\n    angle0 = angleBetween(p0world, p1world, pBworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle0) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((angle0 - Math.PI) / 2);\n    }\n  }\n  // adapt offsets for P1 in case of join; add to angle sum\n  if (joinAfter) {\n    // A for after\n    const pA = [instructions[afterSegmentIndex], instructions[afterSegmentIndex + 1]];\n    const pAworld = applyTransform(toWorldTransform, [...pA]);\n    angle1 = angleBetween(p1world, p0world, pAworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle1) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((Math.PI - angle1) / 2);\n    }\n  }\n\n  /**\n   * @param {number} vertexIndex From 0 to 3, indicating position in the quad\n   * @param {number} angleSum Sum of the join angles encountered so far (used to compute distance offset\n   * @return {number} A float value containing both information\n   */\n  function computeParameters(vertexIndex, angleSum) {\n    if (angleSum === 0) {\n      return vertexIndex * 10000;\n    }\n    return Math.sign(angleSum) * (vertexIndex * 10000 + Math.abs(angleSum));\n  }\n\n  // add main segment triangles\n  vertexArray.push(p0[0], p0[1], m0, p1[0], p1[1], m1, angle0, angle1, currentLength, computeParameters(0, currentAngleTangentSum));\n  vertexArray.push(...customAttributes);\n  vertexArray.push(p0[0], p0[1], m0, p1[0], p1[1], m1, angle0, angle1, currentLength, computeParameters(1, currentAngleTangentSum));\n  vertexArray.push(...customAttributes);\n  vertexArray.push(p0[0], p0[1], m0, p1[0], p1[1], m1, angle0, angle1, currentLength, computeParameters(2, currentAngleTangentSum));\n  vertexArray.push(...customAttributes);\n  vertexArray.push(p0[0], p0[1], m0, p1[0], p1[1], m1, angle0, angle1, currentLength, computeParameters(3, currentAngleTangentSum));\n  vertexArray.push(...customAttributes);\n  indexArray.push(baseIndex, baseIndex + 1, baseIndex + 2, baseIndex + 1, baseIndex + 3, baseIndex + 2);\n  return {\n    length: currentLength + Math.sqrt((p1world[0] - p0world[0]) * (p1world[0] - p0world[0]) + (p1world[1] - p0world[1]) * (p1world[1] - p0world[1])),\n    angle: newAngleTangentSum\n  };\n}\n\n/**\n * Pushes several triangles to form a polygon, including holes\n * @param {Float32Array} instructions Array of render instructions for lines.\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @return {number} Next polygon instructions index\n * @private\n */\nexport function writePolygonTrianglesToBuffers(instructions, polygonStartIndex, vertexArray, indexArray, customAttributesSize) {\n  const instructionsPerVertex = 2; // x, y\n  const attributesPerVertex = 2 + customAttributesSize;\n  let instructionsIndex = polygonStartIndex;\n  const customAttributes = instructions.slice(instructionsIndex, instructionsIndex + customAttributesSize);\n  instructionsIndex += customAttributesSize;\n  const ringsCount = instructions[instructionsIndex++];\n  let verticesCount = 0;\n  const holes = new Array(ringsCount - 1);\n  for (let i = 0; i < ringsCount; i++) {\n    verticesCount += instructions[instructionsIndex++];\n    if (i < ringsCount - 1) {\n      holes[i] = verticesCount;\n    }\n  }\n  const flatCoords = instructions.slice(instructionsIndex, instructionsIndex + verticesCount * instructionsPerVertex);\n\n  // pushing to vertices and indices!! this is where the magic happens\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\n  for (let i = 0; i < result.length; i++) {\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\n  }\n  for (let i = 0; i < flatCoords.length; i += 2) {\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\n  }\n  return instructionsIndex + verticesCount * instructionsPerVertex;\n}\n\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n  const canvas = document.createElement('canvas');\n  const image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, array) {\n  array = array || [];\n  const radix = 256;\n  const divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = Math.floor(id / radix / radix) % radix / divide;\n  array[2] = Math.floor(id / radix) % radix / divide;\n  array[3] = id % radix / divide;\n  return array;\n}\n\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n  let id = 0;\n  const radix = 256;\n  const mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\n\n/**\n * @typedef {import('./VectorStyleRenderer.js').AsShaders} StyleAsShaders\n */\n/**\n * @typedef {import('./VectorStyleRenderer.js').AsRule} StyleAsRule\n */\n\n/**\n * Takes in either a Flat Style or an array of shaders (used as input for the webgl vector layer classes)\n * and breaks it down into separate styles to be used by the VectorStyleRenderer class.\n * @param {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat style or shaders\n * @return {Array<StyleAsShaders | StyleAsRule>} Separate styles as shaders or rules with a single flat style and a filter\n */\nexport function breakDownFlatStyle(style) {\n  // possible cases:\n  // - single shader\n  // - multiple shaders\n  // - single style\n  // - multiple styles\n  // - multiple rules\n  const asArray = Array.isArray(style) ? style : [style];\n\n  // if array of rules: break rules into separate styles, compute \"else\" filters\n  if ('style' in asArray[0]) {\n    /** @type {Array<StyleAsRule>} */\n    const styles = [];\n    const rules = /** @type {Array<import('../../style/flat.js').Rule>} */\n    asArray;\n    const previousFilters = [];\n    for (const rule of rules) {\n      const ruleStyles = Array.isArray(rule.style) ? rule.style : [rule.style];\n      /** @type {import(\"../../expr/expression.js\").EncodedExpression} */\n      let currentFilter = rule.filter;\n      if (rule.else && previousFilters.length) {\n        currentFilter = ['all', ...previousFilters.map(filter => ['!', filter])];\n        if (rule.filter) {\n          currentFilter.push(rule.filter);\n        }\n        if (currentFilter.length < 3) {\n          currentFilter = currentFilter[1];\n        }\n      }\n      if (rule.filter) {\n        previousFilters.push(rule.filter);\n      }\n      /** @type {Array<StyleAsRule>} */\n      const stylesWithFilters = ruleStyles.map(style => ({\n        style,\n        ...(currentFilter && {\n          filter: currentFilter\n        })\n      }));\n      styles.push(...stylesWithFilters);\n    }\n    return styles;\n  }\n\n  // if array of shaders: return as is\n  if ('builder' in asArray[0]) {\n    return /** @type {Array<StyleAsShaders>} */asArray;\n  }\n  return asArray.map(style => (/** @type {StyleAsRule} */{\n    style\n  }));\n}", "/**\n * @module ol/webgl\n */\n\nimport { SAFARI_BUG_237906 } from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/**\n  end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign({\n    preserveDrawingBuffer: true,\n    antialias: SAFARI_BUG_237906 ? false : true // https://bugs.webkit.org/show_bug.cgi?id=237906\n  }, attributes);\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */context;\n      }\n    } catch {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}", "/**\n * @module ol/webgl/Buffer\n */\nimport { assert } from '../asserts.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * A size using `#ofSize(buffer)`\n * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `STATIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`');\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @param {Float32Array|Uint32Array} array Array.\n   */\n  setArray(array) {\n    const ArrayType = getArrayClassForType(this.type_);\n    if (!(array instanceof ArrayType)) {\n      throw new Error(`Expected ${ArrayType}`);\n    }\n    this.array_ = array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;", "/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored'\n};", "/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport { getUid } from '../util.js';\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(name => {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    });\n  }\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureSize[0], textureSize[1]);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer_);\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\nexport default WebGLPostProcessingPass;", "/**\n * @module ol/webgl/Helper\n */\nimport Disposable from '../Disposable.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { getUid } from '../util.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext } from '../webgl.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection'\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {\n      users: 0,\n      context\n    };\n    canvasCache[key] = cacheItem;\n  }\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   `gl_Position`: position of the vertex in screen space\n *\n *   Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ = this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey ? getSharedCanvasCacheKey(options.canvasCacheKey) : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.needsToBeRecreated_ = false;\n    const canvas = this.gl_.canvas;\n    canvas.addEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    canvas.addEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(options => new WebGLPostProcessingPass({\n      webGlContext: this.gl_,\n      scaleRatio: options.scaleRatio,\n      vertexShader: options.vertexShader,\n      fragmentShader: options.fragmentShader,\n      uniforms: options.uniforms\n    })) : [new WebGLPostProcessingPass({\n      webGlContext: this.gl_\n    })];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name]\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const bufferKey = getUid(buf);\n    // Note: gl.deleteBuffer is not called here since we let WebGL garbage collect it automatically\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    canvas.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n    releaseCanvas(this.canvasCacheKey_);\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n    if (canvas.width !== size[0] * pixelRatio || canvas.height !== size[1] * pixelRatio) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * @param {WebGLFramebuffer|null} frameBuffer The frame buffer.\n   * @param {WebGLTexture} [texture] The texture.\n   */\n  bindFrameBuffer(frameBuffer, texture) {\n    const gl = this.getGL();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    if (texture) {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    }\n  }\n\n  /**\n   * Bind the frame buffer from the initial render.\n   */\n  bindInitialFrameBuffer() {\n    const gl = this.getGL();\n    const frameBuffer = this.postProcessPasses_[0].getFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    const texture = this.postProcessPasses_[0].getRenderTargetTexture();\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Set up an attribute array buffer for use in the vertex shader.\n   * @param {import(\"./Buffer\").default} buffer The buffer.\n   * @param {string} attributeName The attribute name.\n   * @param {number} size The number of components per attribute vertex.\n   */\n  bindAttribute(buffer, attributeName, size) {\n    const gl = this.getGL();\n    this.bindBuffer(buffer);\n    const index = this.getAttributeLocation(attributeName);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(frameState, renderTarget, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n      } else {\n        this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */this.gl_.canvas;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [size[0], size[1]]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach(uniform => {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData || value instanceof WebGLTexture) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        const imageReady = !(value instanceof HTMLImageElement) || /** @type {HTMLImageElement} */value.complete;\n        if (!(value instanceof WebGLTexture) && imageReady && uniform.prevValue !== value) {\n          uniform.prevValue = value;\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    if (frameState) {\n      this.applyFrameState(frameState);\n      this.applyUniforms(frameState);\n    }\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n    const fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    const vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(fragmentShader)}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(vertexShader)}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(program)}`;\n      throw new Error(message);\n    }\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] = this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] = this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.  If a Uint8Array is provided for data, a size must also be provided.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|Uint8Array|null} data Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @param {boolean} [nearest] Use gl.NEAREST for min/mag filter.\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture, nearest) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n    const filter = nearest ? gl.NEAREST : gl.LINEAR;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n    if (data instanceof Uint8Array) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, data);\n    } else if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n    }\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\nexport default WebGLHelper;", "/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @private\n     * @type {WebGLRenderbuffer}\n     */\n    this.depthbuffer_ = gl.createRenderbuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n    this.readAll();\n    const index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\n   */\n  getDepthbuffer() {\n    return this.depthbuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size[0], size[1]);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthbuffer_);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\nexport default WebGLRenderTarget;", "export function create() {\n  const source = \"const t=\\\"GENERATE_POLYGON_BUFFERS\\\",e=\\\"GENERATE_POINT_BUFFERS\\\",n=\\\"GENERATE_LINE_STRING_BUFFERS\\\";function r(t,e,n=2){const r=e&&e.length,o=r?e[0]*n:t.length;let u=x(t,0,o,n,!0);const f=[];if(!u||u.next===u.prev)return f;let s,l,h;if(r&&(u=function(t,e,n,r){const o=[];for(let n=0,i=e.length;n<i;n++){const u=x(t,e[n]*r,n<i-1?e[n+1]*r:t.length,r,!1);u===u.next&&(u.steiner=!0),o.push(p(u))}o.sort(c);for(let t=0;t<o.length;t++)n=a(o[t],n);return n}(t,e,u,n)),t.length>80*n){s=1/0,l=1/0;let e=-1/0,r=-1/0;for(let x=n;x<o;x+=n){const n=t[x],o=t[x+1];n<s&&(s=n),o<l&&(l=o),n>e&&(e=n),o>r&&(r=o)}h=Math.max(e-s,r-l),h=0!==h?32767/h:0}return i(u,f,n,s,l,h,0),f}function x(t,e,n,r,x){let o;if(x===function(t,e,n,r){let x=0;for(let o=e,i=n-r;o<n;o+=r)x+=(t[i]-t[o])*(t[o+1]+t[i+1]),i=o;return x}(t,e,n,r)>0)for(let x=e;x<n;x+=r)o=I(x/r|0,t[x],t[x+1],o);else for(let x=n-r;x>=e;x-=r)o=I(x/r|0,t[x],t[x+1],o);return o&&m(o,o.next)&&(z(o),o=o.next),o}function o(t,e){if(!t)return t;e||(e=t);let n,r=t;do{if(n=!1,r.steiner||!m(r,r.next)&&0!==M(r.prev,r,r.next))r=r.next;else{if(z(r),r=e=r.prev,r===r.next)break;n=!0}}while(n||r!==e);return e}function i(t,e,n,r,x,c,a){if(!t)return;!a&&c&&function(t,e,n,r){let x=t;do{0===x.z&&(x.z=y(x.x,x.y,e,n,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==t);x.prevZ.nextZ=null,x.prevZ=null,function(t){let e,n=1;do{let r,x=t;t=null;let o=null;for(e=0;x;){e++;let i=x,u=0;for(let t=0;t<n&&(u++,i=i.nextZ,i);t++);let f=n;for(;u>0||f>0&&i;)0!==u&&(0===f||!i||x.z<=i.z)?(r=x,x=x.nextZ,u--):(r=i,i=i.nextZ,f--),o?o.nextZ=r:t=r,r.prevZ=o,o=r;x=i}o.nextZ=null,n*=2}while(e>1)}(x)}(t,r,x,c);let h=t;for(;t.prev!==t.next;){const y=t.prev,p=t.next;if(c?f(t,r,x,c):u(t))e.push(y.i,t.i,p.i),z(t),t=p.next,h=p.next;else if((t=p)===h){a?1===a?i(t=s(o(t),e),e,n,r,x,c,2):2===a&&l(t,e,n,r,x,c):i(o(t),e,n,r,x,c,1);break}}}function u(t){const e=t.prev,n=t,r=t.next;if(M(e,n,r)>=0)return!1;const x=e.x,o=n.x,i=r.x,u=e.y,f=n.y,s=r.y,l=Math.min(x,o,i),c=Math.min(u,f,s),a=Math.max(x,o,i),h=Math.max(u,f,s);let y=r.next;for(;y!==e;){if(y.x>=l&&y.x<=a&&y.y>=c&&y.y<=h&&g(x,u,o,f,i,s,y.x,y.y)&&M(y.prev,y,y.next)>=0)return!1;y=y.next}return!0}function f(t,e,n,r){const x=t.prev,o=t,i=t.next;if(M(x,o,i)>=0)return!1;const u=x.x,f=o.x,s=i.x,l=x.y,c=o.y,a=i.y,h=Math.min(u,f,s),p=Math.min(l,c,a),v=Math.max(u,f,s),b=Math.max(l,c,a),m=y(h,p,e,n,r),Z=y(v,b,e,n,r);let d=t.prevZ,w=t.nextZ;for(;d&&d.z>=m&&w&&w.z<=Z;){if(d.x>=h&&d.x<=v&&d.y>=p&&d.y<=b&&d!==x&&d!==i&&g(u,l,f,c,s,a,d.x,d.y)&&M(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,w.x>=h&&w.x<=v&&w.y>=p&&w.y<=b&&w!==x&&w!==i&&g(u,l,f,c,s,a,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;w=w.nextZ}for(;d&&d.z>=m;){if(d.x>=h&&d.x<=v&&d.y>=p&&d.y<=b&&d!==x&&d!==i&&g(u,l,f,c,s,a,d.x,d.y)&&M(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;w&&w.z<=Z;){if(w.x>=h&&w.x<=v&&w.y>=p&&w.y<=b&&w!==x&&w!==i&&g(u,l,f,c,s,a,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;w=w.nextZ}return!0}function s(t,e){let n=t;do{const r=n.prev,x=n.next.next;!m(r,x)&&Z(r,n,n.next,x)&&A(r,x)&&A(x,r)&&(e.push(r.i,n.i,x.i),z(n),z(n.next),n=t=x),n=n.next}while(n!==t);return o(n)}function l(t,e,n,r,x,u){let f=t;do{let t=f.next.next;for(;t!==f.prev;){if(f.i!==t.i&&b(f,t)){let s=E(f,t);return f=o(f,f.next),s=o(s,s.next),i(f,e,n,r,x,u,0),void i(s,e,n,r,x,u,0)}t=t.next}f=f.next}while(f!==t)}function c(t,e){let n=t.x-e.x;if(0===n&&(n=t.y-e.y,0===n)){n=(t.next.y-t.y)/(t.next.x-t.x)-(e.next.y-e.y)/(e.next.x-e.x)}return n}function a(t,e){const n=function(t,e){let n=e;const r=t.x,x=t.y;let o,i=-1/0;if(m(t,n))return n;do{if(m(t,n.next))return n.next;if(x<=n.y&&x>=n.next.y&&n.next.y!==n.y){const t=n.x+(x-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=r&&t>i&&(i=t,o=n.x<n.next.x?n:n.next,t===r))return o}n=n.next}while(n!==e);if(!o)return null;const u=o,f=o.x,s=o.y;let l=1/0;n=o;do{if(r>=n.x&&n.x>=f&&r!==n.x&&v(x<s?r:i,x,f,s,x<s?i:r,x,n.x,n.y)){const e=Math.abs(x-n.y)/(r-n.x);A(n,t)&&(e<l||e===l&&(n.x>o.x||n.x===o.x&&h(o,n)))&&(o=n,l=e)}n=n.next}while(n!==u);return o}(t,e);if(!n)return e;const r=E(n,t);return o(r,r.next),o(n,n.next)}function h(t,e){return M(t.prev,t,e.prev)<0&&M(e.next,t,t.next)<0}function y(t,e,n,r,x){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*x|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-r)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function p(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function v(t,e,n,r,x,o,i,u){return(x-i)*(e-u)>=(t-i)*(o-u)&&(t-i)*(r-u)>=(n-i)*(e-u)&&(n-i)*(o-u)>=(x-i)*(r-u)}function g(t,e,n,r,x,o,i,u){return!(t===i&&e===u)&&v(t,e,n,r,x,o,i,u)}function b(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Z(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(A(t,e)&&A(e,t)&&function(t,e){let n=t,r=!1;const x=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&x<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)&&(M(t.prev,t,e.prev)||M(t,e.prev,e))||m(t,e)&&M(t.prev,t,t.next)>0&&M(e.prev,e,e.next)>0)}function M(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function m(t,e){return t.x===e.x&&t.y===e.y}function Z(t,e,n,r){const x=w(M(t,e,n)),o=w(M(t,e,r)),i=w(M(n,r,t)),u=w(M(n,r,e));return x!==o&&i!==u||(!(0!==x||!d(t,n,e))||(!(0!==o||!d(t,r,e))||(!(0!==i||!d(n,t,r))||!(0!==u||!d(n,e,r)))))}function d(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function w(t){return t>0?1:t<0?-1:0}function A(t,e){return M(t.prev,t,t.next)<0?M(t,e,t.next)>=0&&M(t,t.prev,e)>=0:M(t,e,t.prev)<0||M(t,t.next,e)<0}function E(t,e){const n=F(t.i,t.x,t.y),r=F(e.i,e.x,e.y),x=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=x,x.prev=n,r.next=n,n.prev=r,o.next=r,r.prev=o,r}function I(t,e,n,r){const x=F(t,e,n);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function z(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function F(t,e,n){return{i:t,x:e,y:n,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}function P(t,e){const n=e[0],r=e[1];return e[0]=t[0]*n+t[2]*r+t[4],e[1]=t[1]*n+t[3]*r+t[5],e}function B(t,e){const n=(r=e)[0]*r[3]-r[1]*r[2];var r;!function(t,e){if(!t)throw new Error(e)}(0!==n,\\\"Transformation matrix cannot be inverted\\\");const x=e[0],o=e[1],i=e[2],u=e[3],f=e[4],s=e[5];return t[0]=u/n,t[1]=-o/n,t[2]=-i/n,t[3]=x/n,t[4]=(i*s-u*f)/n,t[5]=-(x*s-o*f)/n,t}new Array(6);const N=[],R={vertexPosition:0,indexPosition:0};function S(t,e,n,r,x){t[e+0]=n,t[e+1]=r,t[e+2]=x}function T(t,e,n,r,x,o){const i=3+x,u=t[e+0],f=t[e+1],s=N;s.length=x;for(let n=0;n<s.length;n++)s[n]=t[e+2+n];let l=o?o.vertexPosition:0,c=o?o.indexPosition:0;const a=l/i;return S(n,l,u,f,0),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,1),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,2),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,3),s.length&&n.set(s,l+3),l+=i,r[c++]=a,r[c++]=a+1,r[c++]=a+3,r[c++]=a+1,r[c++]=a+2,r[c++]=a+3,R.vertexPosition=l,R.indexPosition=c,R}function _(t,e,n,r,x,o,i,u,f,s,l){const c=10+u.length,a=o.length/c,h=[t[e+0],t[e+1]],y=[t[n],t[n+1]],p=t[e+2],v=t[n+2],g=P(f,[...h]),b=P(f,[...y]);function M(t,e,n){const r=Math.sqrt((e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])),x=[(e[0]-t[0])/r,(e[1]-t[1])/r],o=[-x[1],x[0]],i=Math.sqrt((n[0]-t[0])*(n[0]-t[0])+(n[1]-t[1])*(n[1]-t[1])),u=[(n[0]-t[0])/i,(n[1]-t[1])/i],f=0===r||0===i?0:Math.acos((s=u[0]*x[0]+u[1]*x[1],l=-1,c=1,Math.min(Math.max(s,l),c)));var s,l,c;return u[0]*o[0]+u[1]*o[1]>0?f:2*Math.PI-f}let m=-1,Z=-1,d=l;const w=null!==x;if(null!==r){m=M(g,b,P(f,[...[t[r],t[r+1]]])),Math.cos(m)<=.985&&(d+=Math.tan((m-Math.PI)/2))}if(w){Z=M(b,g,P(f,[...[t[x],t[x+1]]])),Math.cos(Z)<=.985&&(d+=Math.tan((Math.PI-Z)/2))}function A(t,e){return 0===e?1e4*t:Math.sign(e)*(1e4*t+Math.abs(e))}return o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(0,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(1,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(2,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(3,l)),o.push(...u),i.push(a,a+1,a+2,a+1,a+3,a+2),{length:s+Math.sqrt((b[0]-g[0])*(b[0]-g[0])+(b[1]-g[1])*(b[1]-g[1])),angle:d}}function O(t,e,n,x,o){const i=2+o;let u=e;const f=t.slice(u,u+o);u+=o;const s=t[u++];let l=0;const c=new Array(s-1);for(let e=0;e<s;e++)l+=t[u++],e<s-1&&(c[e]=l);const a=t.slice(u,u+2*l),h=r(a,c,2);for(let t=0;t<h.length;t++)x.push(h[t]+n.length/i);for(let t=0;t<a.length;t+=2)n.push(a[t],a[t+1],...f);return u+2*l}const U=self;U.onmessage=r=>{const x=r.data;switch(x.type){case e:{const t=3,e=2,n=x.customAttributesSize,r=e+n,o=new Float32Array(x.renderInstructions),i=o.length/r,u=4*i*(n+t),f=new Uint32Array(6*i),s=new Float32Array(u);let l;for(let t=0;t<o.length;t+=r)l=T(o,t,s,f,n,l);const c=Object.assign({vertexBuffer:s.buffer,indexBuffer:f.buffer,renderInstructions:o.buffer},x);U.postMessage(c,[s.buffer,f.buffer,o.buffer]);break}case n:{const t=[],e=[],n=x.customAttributesSize,r=3,o=new Float32Array(x.renderInstructions);let i=0;const u=[1,0,0,1,0,0];let f,s;for(B(u,x.renderInstructionsTransform);i<o.length;){s=Array.from(o.slice(i,i+n)),i+=n,f=o[i++];const x=i,l=i+(f-1)*r,c=o[x]===o[l]&&o[x+1]===o[l+1];let a=0,h=0;for(let n=0;n<f-1;n++){let y=null;n>0?y=i+(n-1)*r:c&&(y=l-r);let p=null;n<f-2?p=i+(n+2)*r:c&&(p=x+r);const v=_(o,i+n*r,i+(n+1)*r,y,p,t,e,s,u,a,h);a=v.length,h=v.angle}i+=f*r}const l=Uint32Array.from(e),c=Float32Array.from(t),a=Object.assign({vertexBuffer:c.buffer,indexBuffer:l.buffer,renderInstructions:o.buffer},x);U.postMessage(a,[c.buffer,l.buffer,o.buffer]);break}case t:{const t=[],e=[],n=x.customAttributesSize,r=new Float32Array(x.renderInstructions);let o=0;for(;o<r.length;)o=O(r,o,t,e,n);const i=Uint32Array.from(e),u=Float32Array.from(t),f=Object.assign({vertexBuffer:u.buffer,indexBuffer:i.buffer,renderInstructions:r.buffer},x);U.postMessage(f,[u.buffer,i.buffer,r.buffer]);break}}};\";\n  return new Worker(typeof Blob === 'undefined' ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64') : URL.createObjectURL(new Blob([source], {\n    type: 'application/javascript'\n  })));\n}", "/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport LayerRenderer from '../Layer.js';\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass WebGLLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(layer, options) {\n    super(layer);\n    options = options || {};\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.postProcesses_ = options.postProcesses;\n\n    /**\n     * @private\n     */\n    this.uniforms_ = options.uniforms;\n\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n    this.helper;\n    this.onMapChanged_ = () => {\n      this.clearCache();\n      this.removeHelper();\n    };\n    layer.addChangeListener(LayerProperty.MAP, this.onMapChanged_);\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPreComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      const event = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPostComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      const event = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    this.uniforms_ = options.uniforms;\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  removeHelper() {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    if (this.getLayer().getRenderSource()) {\n      let incrementGroup = true;\n      let groupNumber = -1;\n      let className;\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        const layer = frameState.layerStatesArray[i].layer;\n        const renderer = layer.getRenderer();\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n        const layerClassName = layer.getClassName();\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n        className = layerClassName;\n        if (renderer === this) {\n          break;\n        }\n      }\n      const canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n      if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey) || this.helper.needsToBeRecreated()) {\n        this.removeHelper();\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey\n        });\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n        this.afterHelperCreated();\n      }\n    }\n    return this.prepareFrameInternal(frameState);\n  }\n\n  /**\n   * @protected\n   */\n  afterHelperCreated() {}\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n  prepareFrameInternal(frameState) {\n    return true;\n  }\n\n  /**\n   * @protected\n   */\n  clearCache() {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearCache();\n    this.removeHelper();\n    this.getLayer()?.removeChangeListener(LayerProperty.MAP, this.onMapChanged_);\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n      const event = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n}\nexport default WebGLLayerRenderer;", "import { getWidth } from '../../extent.js';\n\n/**\n * Compute world params\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {any} layer The layer\n * @return {Array<number>} The world start, end and width.\n */\nexport function getWorldParameters(frameState, layer) {\n  const projection = frameState.viewState.projection;\n  const vectorSource = layer.getSource();\n  const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n  const projectionExtent = projection.getExtent();\n  const extent = frameState.extent;\n  const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n  const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n  const startWorld = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n  return [startWorld, endWorld, worldWidth];\n}", "/**\n * @module ol/renderer/webgl/PointsLayer\n */\nimport ViewHint from '../../ViewHint.js';\nimport { assert } from '../../asserts.js';\nimport { listen, unlistenByKey } from '../../events.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport BaseVector from '../../layer/BaseVector.js';\nimport { fromUserCoordinate, getUserProjection } from '../../proj.js';\nimport { WebGLWorkerMessageType } from '../../render/webgl/constants.js';\nimport { colorDecodeId, colorEncodeId } from '../../render/webgl/utils.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, translate as translateTransform } from '../../transform.js';\nimport { getUid } from '../../util.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport { getWorldParameters } from './worldUtil.js';\n\n/** @typedef {import(\"../../geom/Point.js\").default} Point */\n/** @typedef {import(\"../../Feature\").default<Point>} PointFeature */\n\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(PointFeature, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {PointFeature} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../coordinate.js\").Coordinate} flatCoordinates Point coordinates\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  In the vertex shader as an `attribute` by prefixing it with `a_`\n *  In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {boolean} [hitDetectionEnabled] Whether shader is hit detection aware.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = options.uniforms || {};\n    const projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    });\n\n    /**\n     * @private\n     */\n    this.sourceRevision_ = -1;\n\n    /**\n     * @private\n     */\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    /**\n     * @private\n     */\n    this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;\n    const customAttributes = options.attributes ? options.attributes.map(function (attribute) {\n      return {\n        name: 'a_' + attribute.name,\n        size: 1,\n        type: AttributeType.FLOAT\n      };\n    }) : [];\n\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n    this.attributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }];\n    if (this.hitDetectionEnabled_) {\n      this.attributes.push({\n        name: 'a_hitColor',\n        size: 4,\n        type: AttributeType.FLOAT\n      });\n      this.attributes.push({\n        name: 'a_featureUid',\n        size: 1,\n        type: AttributeType.FLOAT\n      });\n    }\n    this.attributes.push(...customAttributes);\n    this.customAttributes = options.attributes ? options.attributes : [];\n\n    /**\n     * @private\n     */\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = projectionMatrixTransform;\n\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.renderTransform_ = createTransform();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.invertRenderTransform_ = createTransform();\n\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n    this.renderInstructions_ = new Float32Array(0);\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n    this.lastSentId = 0;\n\n    /**\n     * @private\n     */\n    this.worker_ = createWebGLWorker();\n    this.worker_.addEventListener('message',\n    /**\n     * @param {*} event Event.\n     */\n    event => {\n      const received = event.data;\n      if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\n        const projectionTransform = received.projectionTransform;\n        this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n        this.helper.flushBufferData(this.verticesBuffer_);\n        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n        this.helper.flushBufferData(this.indicesBuffer_);\n        this.renderTransform_ = projectionTransform;\n        makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n        this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n        if (received.id === this.lastSentId) {\n          this.ready = true;\n        }\n        this.getLayer().changed();\n      }\n    });\n\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n    this.featureCache_ = {};\n\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n    this.featureCount_ = 0;\n    const source = /** @type {import(\"../../source/Vector.js\").default} */\n    this.getLayer().getSource();\n    /**\n     * @private\n     */\n    this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, this.handleSourceFeatureAdded_, this), listen(source, VectorEventType.CHANGEFEATURE, this.handleSourceFeatureChanged_, this), listen(source, VectorEventType.REMOVEFEATURE, this.handleSourceFeatureDelete_, this), listen(source, VectorEventType.CLEAR, this.handleSourceFeatureClear_, this)];\n    source.forEachFeature(feature => {\n      const geometry = feature.getGeometry();\n      if (geometry && geometry.getType() === 'Point') {\n        this.featureCache_[getUid(feature)] = {\n          feature: (/** @type {PointFeature} */feature),\n          properties: feature.getProperties(),\n          flatCoordinates: /** @type {Point} */geometry.getFlatCoordinates()\n        };\n        this.featureCount_++;\n      }\n    });\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n\n    // upload buffers again if any\n    if (this.verticesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.verticesBuffer_);\n    }\n    if (this.indicesBuffer_.getArray()) {\n      this.helper.flushBufferData(this.indicesBuffer_);\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(event) {\n    const feature = event.feature;\n    const geometry = feature.getGeometry();\n    if (geometry && geometry.getType() === 'Point') {\n      this.featureCache_[getUid(feature)] = {\n        feature: (/** @type {PointFeature} */feature),\n        properties: feature.getProperties(),\n        flatCoordinates: /** @type {Point} */geometry.getFlatCoordinates()\n      };\n      this.featureCount_++;\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    const featureUid = getUid(feature);\n    const item = this.featureCache_[featureUid];\n    const geometry = feature.getGeometry();\n    if (item) {\n      if (geometry && geometry.getType() === 'Point') {\n        item.properties = feature.getProperties();\n        item.flatCoordinates = /** @type {Point} */geometry.getFlatCoordinates();\n      } else {\n        delete this.featureCache_[featureUid];\n        this.featureCount_--;\n      }\n    } else {\n      if (geometry && geometry.getType() === 'Point') {\n        this.featureCache_[featureUid] = {\n          feature: (/** @type {PointFeature} */feature),\n          properties: feature.getProperties(),\n          flatCoordinates: /** @type {Point} */geometry.getFlatCoordinates()\n        };\n        this.featureCount_++;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    const featureUid = getUid(feature);\n    if (featureUid in this.featureCache_) {\n      delete this.featureCache_[featureUid];\n      this.featureCount_--;\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(frameState, this.getLayer());\n\n    // draw the normal canvas\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    if (this.hitDetectionEnabled_) {\n      // draw the hit buffer\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n    this.postRender(gl, frameState);\n    const canvas = this.helper.getCanvas();\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n      const renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    }\n    this.helper.useProgram(this.program_, frameState);\n    this.helper.prepareDraw(frameState);\n\n    // write new data\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    return true;\n  }\n\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  rebuildBuffers_(frameState) {\n    // saves the projection transform for the current frame state\n    const projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\n    const userProjection = getUserProjection();\n    const baseInstructionLength = this.hitDetectionEnabled_ ? 7 : 2; // see below\n    const singleInstructionLength = baseInstructionLength + this.customAttributes.length;\n    const totalSize = singleInstructionLength * this.featureCount_;\n    const renderInstructions = this.renderInstructions_ && this.renderInstructions_.length === totalSize ? this.renderInstructions_ : new Float32Array(totalSize);\n    this.renderInstructions_ = null;\n\n    // loop over features to fill the buffer\n    /** @type {import('../../coordinate.js').Coordinate} */\n    let tmpCoords = [];\n    /** @type {Array<number>} */\n    const tmpColor = [];\n    let idx = -1;\n    const projection = frameState.viewState.projection;\n    for (const featureUid in this.featureCache_) {\n      const featureCache = this.featureCache_[featureUid];\n      if (userProjection) {\n        tmpCoords = fromUserCoordinate(featureCache.flatCoordinates, projection);\n      } else {\n        tmpCoords[0] = featureCache.flatCoordinates[0];\n        tmpCoords[1] = featureCache.flatCoordinates[1];\n      }\n      applyTransform(projectionTransform, tmpCoords);\n      renderInstructions[++idx] = tmpCoords[0];\n      renderInstructions[++idx] = tmpCoords[1];\n\n      // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n      if (this.hitDetectionEnabled_) {\n        const hitColor = colorEncodeId(idx + 5, tmpColor);\n        renderInstructions[++idx] = hitColor[0];\n        renderInstructions[++idx] = hitColor[1];\n        renderInstructions[++idx] = hitColor[2];\n        renderInstructions[++idx] = hitColor[3];\n        renderInstructions[++idx] = Number(featureUid);\n      }\n\n      // pushing custom attributes\n      for (let j = 0; j < this.customAttributes.length; j++) {\n        const value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n        renderInstructions[++idx] = value;\n      }\n    }\n\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: ++this.lastSentId,\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\n      renderInstructions: renderInstructions.buffer,\n      customAttributesSize: singleInstructionLength - 2\n    };\n    // additional properties will be sent back as-is by the worker\n    message['projectionTransform'] = projectionTransform;\n    this.ready = false;\n    this.worker_.postMessage(message, [renderInstructions.buffer]);\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.');\n    if (!this.renderInstructions_ || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n    const pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const index = colorDecodeId(color);\n    const opacity = this.renderInstructions_[index];\n    const uid = Math.floor(opacity).toString();\n    const source = this.getLayer().getSource();\n    const feature = source.getFeatureByUid(uid);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n    this.helper.useProgram(this.program_, frameState);\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n      this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    }\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n      this.helper.applyUniforms(frameState);\n      this.helper.applyHitDetectionUniform(forHitDetection);\n      const renderCount = this.indicesBuffer_.getSize();\n      this.helper.drawElements(0, renderCount);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.worker_.terminate();\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n    super.disposeInternal();\n  }\n  renderDeclutter() {}\n}\nexport default WebGLPointsLayerRenderer;", "/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport EventType from '../events/EventType.js';\nimport EventTarget from '../events/Target.js';\nimport { abstract } from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper = options.helper;\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    this.helper = helper;\n    if (this.helper && this.loaded) {\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.setHelper(null);\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\nexport default BaseTileRepresentation;", "/**\n * @module ol/webgl/TileTexture\n */\n\nimport DataTile, { asArrayLike, asImageLike } from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport { toSize } from '../size.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport WebGLArrayBuffer from './Buffer.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n  let format;\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n    default:\n      {\n        throw new Error(`Unsupported number of bands: ${bandCount}`);\n      }\n  }\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(options.grid.getTileSize(options.tile.tileCoord[0]));\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0,\n    // P0\n    1, 1,\n    // P1\n    1, 1,\n    // P2\n    0, 0,\n    // P3\n    0]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n    super.setHelper(helper);\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n    data = asArrayLike(data);\n    const sourceTileSize = /** @type {DataTile} */tile.getSize();\n    const pixelSize = [sourceTileSize[0] + 2 * this.gutter, sourceTileSize[1] + 2 * this.gutter];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);\n      this.setReady();\n      return;\n    }\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      const bandCount = textureIndex < textureCount - 1 ? 4 : (this.bandCount - 1) % 4 + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);\n    }\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n    const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n    const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n    const sourceCol = gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n    const sourceRow = gutter + Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(arrayData, sourceSize, renderCol, renderRow);\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\nexport default TileTexture;", "/**\n * @module ol/renderer/webgl/TileLayerBase\n */\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { descending } from '../../array.js';\nimport { getIntersection, getRotatedViewport, isEmpty } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { toSize } from '../../size.js';\nimport LRUCache from '../../structs/LRUCache.js';\nimport { createOrUpdate as createTileCoord, getKey as getTileCoordKey } from '../../tilecoord.js';\nimport { create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform, translate as translateTransform } from '../../transform.js';\nimport { abstract, getUid } from '../../util.js';\nimport { create as createMat4 } from '../../vec/mat4.js';\nimport WebGLLayerRenderer from './Layer.js';\nexport const Uniforms = {\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  RENDER_EXTENT: 'u_renderExtent',\n  // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix'\n};\n\n/**\n * Transform a zoom level into a depth value; zoom level zero has a depth value of 0.5, and increasing values\n * have a depth trending towards 0\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\nfunction depthForZ(z) {\n  return 1 / (z + 2);\n}\n\n/**\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\n */\n/**\n * @typedef {Object} TileRepresentationLookup\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\n */\n\n/**\n * @return {TileRepresentationLookup} A new tile representation lookup.\n */\nexport function newTileRepresentationLookup() {\n  return {\n    tileIds: new Set(),\n    representationsByZ: {}\n  };\n}\n\n/**\n * Check if a tile is already in the tile representation lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @return {boolean} The tile is already in the lookup.\n */\nfunction lookupHasTile(tileRepresentationLookup, tile) {\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\n}\n\n/**\n * Add a tile representation to the lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\n * @param {number} z The zoom level.\n */\nfunction addTileRepresentationToLookup(tileRepresentationLookup, tileRepresentation, z) {\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\n  if (!(z in representationsByZ)) {\n    representationsByZ[z] = new Set();\n  }\n  representationsByZ[z].add(tileRepresentation);\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(extent, fromUserExtent(layerState.extent, frameState.viewState.projection));\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */\n  layerState.layer.getRenderSource();\n  if (!source.getWrapX()) {\n    const gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\n/**\n * @param {import(\"../../source/Tile.js\").default} source The source.\n * @param {import('../../tilecoord.js').TileCoord} tileCoord The tile coordinate.\n * @return {string} The cache key.\n */\nexport function getCacheKey(source, tileCoord) {\n  return `${source.getKey()},${source.getRevision()},${getTileCoordKey(tileCoord)}`;\n}\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {number} [cacheSize=512] The tile representation cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\n */\n\n/**\n * @classdesc\n * Base WebGL renderer for tile layers.\n * @template {BaseLayerType} LayerType\n * @template {import(\"../../Tile.js\").default} TileType\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\n * @extends {WebGLLayerRenderer<LayerType>}\n */\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      uniforms: options.uniforms,\n      postProcesses: options.postProcesses\n    });\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * This transform converts representation coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.tileTransform_ = createTransform();\n\n    /**\n     * @type {Array<number>}\n     * @protected\n     */\n    this.tempMat4 = createMat4();\n\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n    this.tempSize_ = [0, 0];\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\n     * @protected\n     */\n    this.tileRepresentationCache = new LRUCache(cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection_ = undefined;\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset({\n      uniforms: options.uniforms\n    });\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.renderedProjection_) {\n      this.renderedProjection_ = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.renderedProjection_) {\n      this.clearCache();\n      this.renderedProjection_ = frameState.viewState.projection;\n    }\n    const layer = this.getLayer();\n    const source = layer.getRenderSource();\n    if (!source) {\n      return false;\n    }\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n    return source.getState() === 'ready';\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\n   * @return {TileRepresentation} A new tile representation\n   * @protected\n   */\n  createTileRepresentation(options) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(frameState, extent, initialZ, tileRepresentationLookup, preload) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileRepresentationCache = this.tileRepresentationCache;\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(initialZ - preload, tileGrid.getMinZoom(), tileGrid.getZForResolution(Math.min(tileLayer.getMaxResolution(), map ? map.getView().getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0)) : tileGrid.getResolution(0)), tileSource.zDirection));\n    const rotation = viewState.rotation;\n    const viewport = rotation ? getRotatedViewport(viewState.center, viewState.resolution, rotation, frameState.size) : undefined;\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);\n      const tileResolution = tileGrid.getResolution(z);\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (rotation && !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)) {\n            continue;\n          }\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          const cacheKey = getCacheKey(tileSource, tileCoord);\n\n          /** @type {TileRepresentation} */\n          let tileRepresentation;\n\n          /** @type {TileType} */\n          let tile;\n          if (tileRepresentationCache.containsKey(cacheKey)) {\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\n            tile = tileRepresentation.tile;\n          }\n          if (!tileRepresentation || tileRepresentation.tile.key !== tileSource.getKey()) {\n            tile = tileSource.getTile(z, x, y, frameState.pixelRatio, viewState.projection);\n            if (!tile) {\n              continue;\n            }\n          }\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\n            continue;\n          }\n          if (!tileRepresentation) {\n            tileRepresentation = this.createTileRepresentation({\n              tile: tile,\n              grid: tileGrid,\n              helper: this.helper,\n              gutter: gutter\n            });\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\n          } else {\n            tileRepresentation.setTile(tile);\n          }\n          addTileRepresentationToLookup(tileRepresentationLookup, tileRepresentation, z);\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([tile, tileSourceKey, tileGrid.getTileCoordCenter(tileCoord), tileResolution]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\n   * @protected\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} If returns false, tile mask rendering will be skipped\n   * @protected\n   */\n  beforeTilesMaskRender(frameState) {\n    return false;\n  }\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\n   * @param {number} tileResolution Tile resolution\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\n   * @param {number} depth Depth\n   * @param {number} gutter Gutter\n   * @param {number} alpha Alpha\n   * @protected\n   */\n  renderTile(tileRepresentation, tileTransform, frameState, renderExtent, tileResolution, tileSize, tileOrigin, tileExtent, depth, gutter, alpha) {}\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {number} tileZ Tile Z\n   * @param {import(\"../../extent.js\").Extent} extent Render extent\n   * @param {number} depth Depth\n   * @protected\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {}\n  drawTile_(frameState, tileRepresentation, tileZ, gutter, extent, alphaLookup, tileGrid) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    const tile = tileRepresentation.tile;\n    const tileCoord = tile.tileCoord;\n    const tileCoordKey = getTileCoordKey(tileCoord);\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n    const tileResolution = tileGrid.getResolution(tileZ);\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n    const tileOrigin = tileGrid.getOrigin(tileZ);\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n    // tiles with alpha are rendered last to allow blending\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\n    if (alpha < 1) {\n      frameState.animate = true;\n    }\n    const viewState = frameState.viewState;\n    const centerX = viewState.center[0];\n    const centerY = viewState.center[1];\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n    const tileScale = viewState.resolution / tileResolution;\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n    resetTransform(this.tileTransform_);\n    scaleTransform(this.tileTransform_, 2 / (frameState.size[0] * tileScale / tileWidthWithGutter), -2 / (frameState.size[1] * tileScale / tileWidthWithGutter));\n    rotateTransform(this.tileTransform_, viewState.rotation);\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\n    translateTransform(this.tileTransform_, (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter, (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter);\n    this.renderTile(/** @type {TileRepresentation} */tileRepresentation, this.tileTransform_, frameState, extent, tileResolution, tileSize, tileOrigin, tileExtent, depth, gutter, alpha);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    this.frameState = frameState;\n    this.renderComplete = true;\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const extent = getRenderExtent(frameState, frameState.extent);\n    const z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n\n    /**\n     * @type {TileRepresentationLookup}\n     */\n    const tileRepresentationLookup = newTileRepresentationLookup();\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(frameState, nextExtent, targetZ, tileRepresentationLookup, preload);\n    }\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(frameState, extent, z - 1, tileRepresentationLookup, preload - 1);\n      }, 0);\n    }\n\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n    const alphaLookup = {};\n    let blend = false;\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\n\n    // look for cached tiles to use if a target tile is not ready\n    if (z in representationsByZ) {\n      const uid = getUid(this);\n      const time = frameState.time;\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tile = tileRepresentation.tile;\n        if (tile.getState() === TileState.EMPTY) {\n          continue;\n        }\n        const tileCoord = tile.tileCoord;\n        if (tileRepresentation.ready) {\n          const alpha = tile.getAlpha(uid, time);\n          if (alpha === 1) {\n            // no need to look for alt tiles\n            tile.endTransition(uid);\n            continue;\n          }\n          blend = true;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          alphaLookup[tileCoordKey] = alpha;\n        }\n        this.renderComplete = false;\n\n        // first look for child tiles (at z + 1)\n        const coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tileRepresentationLookup);\n        if (coveredByChildren) {\n          continue;\n        }\n\n        // next look for parent tiles\n        const minZoom = tileGrid.getMinZoom();\n        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n          const coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tileRepresentationLookup);\n          if (coveredByParent) {\n            break;\n          }\n        }\n      }\n    }\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\n    const renderTileMask = this.beforeTilesMaskRender(frameState);\n    if (renderTileMask) {\n      for (let j = 0, jj = zs.length; j < jj; ++j) {\n        const tileZ = zs[j];\n        for (const tileRepresentation of representationsByZ[tileZ]) {\n          const tileCoord = tileRepresentation.tile.tileCoord;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          // do not render the tile mask if alpha < 1\n          if (tileCoordKey in alphaLookup) {\n            continue;\n          }\n          const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n          this.renderTileMask(/** @type {TileRepresentation} */tileRepresentation, tileZ, tileExtent, depthForZ(tileZ));\n        }\n      }\n    }\n    this.beforeTilesRender(frameState, blend);\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\n      const tileZ = zs[j];\n      for (const tileRepresentation of representationsByZ[tileZ]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          continue;\n        }\n        this.drawTile_(frameState, tileRepresentation, tileZ, gutter, extent, alphaLookup, tileGrid);\n      }\n    }\n    if (z in representationsByZ) {\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          this.drawTile_(frameState, tileRepresentation, z, gutter, extent, alphaLookup, tileGrid);\n        }\n      }\n    }\n    this.beforeFinalize(frameState);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    const canvas = this.helper.getCanvas();\n    const tileRepresentationCache = this.tileRepresentationCache;\n    while (tileRepresentationCache.canExpireCache()) {\n      const tileRepresentation = tileRepresentationCache.pop();\n      tileRepresentation.dispose();\n    }\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  beforeFinalize(frameState) {\n    return;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\n   * tile representations by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);\n    if (!tileRange) {\n      return false;\n    }\n    let covered = true;\n    const tileRepresentationCache = this.tileRepresentationCache;\n    const source = this.getLayer().getRenderSource();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\n        let loaded = false;\n        if (tileRepresentationCache.containsKey(cacheKey)) {\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\n          if (tileRepresentation.ready && !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)) {\n            addTileRepresentationToLookup(tileRepresentationLookup, tileRepresentation, altZ);\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @override\n   */\n  clearCache() {\n    super.clearCache();\n    const tileRepresentationCache = this.tileRepresentationCache;\n    tileRepresentationCache.forEach(tileRepresentation => tileRepresentation.dispose());\n    tileRepresentationCache.clear();\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n    this.tileRepresentationCache.forEach(tileRepresentation => tileRepresentation.setHelper(this.helper));\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n    delete this.frameState;\n  }\n}\nexport default WebGLBaseTileLayerRenderer;", "/**\n * @module ol/renderer/webgl/TileLayer\n */\nimport TileState from '../../TileState.js';\nimport { boundingExtent, containsCoordinate, getIntersection } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { toSize } from '../../size.js';\nimport { apply as applyTransform } from '../../transform.js';\nimport { fromTransform as mat4FromTransform } from '../../vec/mat4.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport { AttributeType } from '../../webgl/Helper.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport { ELEMENT_ARRAY_BUFFER, STATIC_DRAW } from '../../webgl.js';\nimport WebGLBaseTileLayerRenderer, { Uniforms as BaseUniforms, getCacheKey } from './TileLayerBase.js';\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution',\n  // map units per texture pixel\n  TEXTURE_ORIGIN_X: 'u_textureOriginX',\n  // map x coordinate of left edge of texture\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY' // map y coordinate of top edge of texture\n};\nexport const Attributes = {\n  TEXTURE_COORD: 'a_textureCoord'\n};\n\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\nconst attributeDescriptions = [{\n  name: Attributes.TEXTURE_COORD,\n  size: 2,\n  type: AttributeType.FLOAT\n}];\n\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @template {import(\"../../layer/WebGLTile.js\").default|import(\"../../layer/Flow.js\").default} LayerType\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\n * @api\n */\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, options);\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n    this.paletteTextures_ = options.paletteTextures || [];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        // upload the texture data\n        paletteTexture.getTexture(gl);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n    const gl = this.helper.getGL();\n    for (const paletteTexture of this.paletteTextures_) {\n      // upload the texture data\n      paletteTexture.getTexture(gl);\n    }\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    this.helper.flushBufferData(this.indices_);\n  }\n\n  /**\n   * @override\n   */\n  removeHelper() {\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n    super.removeHelper();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    return new TileTexture(options);\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, tilesWithAlpha);\n    this.helper.useProgram(this.program_, frameState);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(tileTexture, tileTransform, frameState, renderExtent, tileResolution, tileSize, tileOrigin, tileExtent, depth, gutter, alpha) {\n    const gl = this.helper.getGL();\n    this.helper.bindBuffer(tileTexture.coords);\n    this.helper.bindBuffer(this.indices_);\n    this.helper.enableAttributes(attributeDescriptions);\n    let textureSlot = 0;\n    while (textureSlot < tileTexture.textures.length) {\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\n      this.helper.bindTexture(tileTexture.textures[textureSlot], textureSlot, uniformName);\n      ++textureSlot;\n    }\n    for (let paletteIndex = 0; paletteIndex < this.paletteTextures_.length; ++paletteIndex) {\n      const paletteTexture = this.paletteTextures_[paletteIndex];\n      const texture = paletteTexture.getTexture(gl);\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\n      ++textureSlot;\n    }\n    const viewState = frameState.viewState;\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n    const tile = tileTexture.tile;\n    const tileCoord = tile.tileCoord;\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n    this.helper.setUniformMatrixValue(Uniforms.TILE_TRANSFORM, mat4FromTransform(this.tempMat4, tileTransform));\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n    let gutterExtent = renderExtent;\n    if (gutter > 0) {\n      gutterExtent = tileExtent;\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\n    }\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n    this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_WIDTH, tileWidthWithGutter);\n    this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_HEIGHT, tileHeightWithGutter);\n    this.helper.setUniformFloatValue(Uniforms.TEXTURE_RESOLUTION, tileResolution);\n    this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_X, tileOrigin[0] + tileCenterI * tileSize[0] * tileResolution - gutter * tileResolution);\n    this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_Y, tileOrigin[1] - tileCenterJ * tileSize[1] * tileResolution + gutter * tileResolution);\n    this.helper.drawElements(0, this.indices_.getSize());\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const gl = this.helper.getGL();\n    if (!gl) {\n      return null;\n    }\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n    const layer = this.getLayer();\n    const coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    const viewState = frameState.viewState;\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(fromUserExtent(layerExtent, viewState.projection), coordinate)) {\n        return null;\n      }\n    }\n\n    // determine last source suitable for rendering at coordinate\n    const sources = layer.getSources(boundingExtent([coordinate]), viewState.resolution);\n    let i, source, tileGrid;\n    for (i = sources.length - 1; i >= 0; --i) {\n      source = sources[i];\n      if (source.getState() === 'ready') {\n        tileGrid = source.getTileGridForProjection(viewState.projection);\n        if (source.getWrapX()) {\n          break;\n        }\n        const gridExtent = tileGrid.getExtent();\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\n          break;\n        }\n      }\n    }\n    if (i < 0) {\n      return null;\n    }\n    const tileTextureCache = this.tileRepresentationCache;\n    for (let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const cacheKey = getCacheKey(source, tileCoord);\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n      const tileTexture = tileTextureCache.get(cacheKey);\n      const tile = tileTexture.tile;\n      if (tile.getState() === TileState.EMPTY) {\n        return null;\n      }\n      if (!tileTexture.loaded) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n      const col = (coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0];\n      const row = (tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1];\n      return tileTexture.getPixelData(col, row);\n    }\n    return null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const helper = this.helper;\n    if (helper) {\n      const gl = helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n      this.paletteTextures_.length = 0;\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n      helper.deleteBuffer(this.indices_);\n    }\n    super.disposeInternal();\n    delete this.indices_;\n  }\n}\nexport default WebGLTileLayerRenderer;", "/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.data.length / 4, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\nexport default PaletteTexture;", "/**\n * @module ol/expr/gpu\n */\nimport { asArray } from '../color.js';\nimport { Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { toSize } from '../size.js';\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport { BooleanType, CallExpression, ColorType, NumberArrayType, NumberType, Ops, SizeType, StringType, parse, typeName } from './expression.js';\n\n/**\n * @param {string} operator Operator\n * @param {CompilationContext} context Compilation context\n * @return {string} A function name based on the operator, unique in the given context\n */\nfunction computeOperatorFunctionName(operator, context) {\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\n}\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\nexport function numberToGlsl(v) {\n  const s = v.toString();\n  return s.includes('.') ? s : s + '.0';\n}\n\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error('`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.');\n  }\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\n}\n\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function colorToGlsl(color) {\n  const array = asArray(color);\n  const alpha = array.length > 3 ? array[3] : 1;\n  return arrayToGlsl([array[0] / 255, array[1] / 255, array[2] / 255, alpha]);\n}\n\n/**\n * Normalizes and converts a number or array toa `vec2` array compatible with GLSL.\n * @param {number|import('../size.js').Size} size Size.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function sizeToGlsl(size) {\n  const array = toSize(size);\n  return arrayToGlsl(array);\n}\n\n/** @type {Object<string, number>} */\nconst stringToFloatMap = {};\nlet stringToFloatCounter = 0;\n\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\nexport function getStringNumberEquivalent(string) {\n  if (!(string in stringToFloatMap)) {\n    stringToFloatMap[string] = stringToFloatCounter++;\n  }\n  return stringToFloatMap[string];\n}\n\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\nexport function stringToGlsl(string) {\n  return numberToGlsl(getStringNumberEquivalent(string));\n}\n\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\n\n/**\n * @typedef {import('./expression.js').ParsingContext} ParsingContext\n */\n/**\n *\n * @typedef {import(\"./expression.js\").Expression} Expression\n */\n/**\n *\n * @typedef {import(\"./expression.js\").LiteralExpression} LiteralExpression\n */\n\n/**\n * @typedef {Object} CompilationContextProperty\n * @property {string} name Name\n * @property {number} type Resolved property type\n */\n\n/**\n * @typedef {Object} CompilationContextVariable\n * @property {string} name Name\n * @property {number} type Resolved variable type\n */\n\n/**\n * @typedef {Object} CompilationContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Object<string, CompilationContextProperty>} properties The values for properties used in 'get' expressions.\n * @property {Object<string, CompilationContextVariable>} variables The values for variables used in 'var' expressions.\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n * @property {boolean} featureId Whether the feature ID is used in the expression\n * @property {boolean} geometryType Whether the geometry type is used in the expression\n */\n\n/**\n * @return {CompilationContext} A new compilation context.\n */\nexport function newCompilationContext() {\n  return {\n    inFragmentShader: false,\n    variables: {},\n    properties: {},\n    functions: {},\n    bandCount: 0,\n    featureId: false,\n    geometryType: false\n  };\n}\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\nexport const FEATURE_ID_PROPERTY_NAME = 'featureId';\nexport const GEOMETRY_TYPE_PROPERTY_NAME = 'geometryType';\n\n/**\n * @typedef {string} CompiledExpression\n */\n\n/**\n * @typedef {function(CompilationContext, CallExpression, number): string} Compiler\n * Third argument is the expected value types\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} parsingContext The parsing context.\n * @param {CompilationContext} compilationContext An existing compilation context\n * @return {CompiledExpression} The compiled expression.\n */\nexport function buildExpression(encoded, type, parsingContext, compilationContext) {\n  const expression = parse(encoded, type, parsingContext);\n  return compile(expression, type, compilationContext);\n}\n\n/**\n * @param {function(Array<CompiledExpression>, CompilationContext): string} output Function that takes in parsed arguments and returns a string\n * @return {function(CompilationContext, import(\"./expression.js\").CallExpression, number): string} Compiler for the call expression\n */\nfunction createCompiler(output) {\n  return (context, expression, type) => {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      args[i] = compile(expression.args[i], type, context);\n    }\n    return output(args, context);\n  };\n}\n\n/**\n * @type {Object<string, Compiler>}\n */\nconst compilers = {\n  [Ops.Get]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */expression.args[0];\n    const propName = /** @type {string} */firstArg.value;\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: expression.type\n      };\n    }\n    const prefix = context.inFragmentShader ? 'v_prop_' : 'a_prop_';\n    return prefix + propName;\n  },\n  [Ops.Id]: context => {\n    context.featureId = true;\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + FEATURE_ID_PROPERTY_NAME;\n  },\n  [Ops.GeometryType]: context => {\n    context.geometryType = true;\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + GEOMETRY_TYPE_PROPERTY_NAME;\n  },\n  [Ops.LineMetric]: () => 'currentLineMetric',\n  // this variable is assumed to always be present in shaders, default is 0.\n  [Ops.Var]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */expression.args[0];\n    const varName = /** @type {string} */firstArg.value;\n    const isExisting = varName in context.variables;\n    if (!isExisting) {\n      context.variables[varName] = {\n        name: varName,\n        type: expression.type\n      };\n    }\n    return uniformNameForVariable(varName);\n  },\n  [Ops.Resolution]: () => 'u_resolution',\n  [Ops.Zoom]: () => 'u_zoom',\n  [Ops.Time]: () => 'u_time',\n  [Ops.Any]: createCompiler(compiledArgs => `(${compiledArgs.join(` || `)})`),\n  [Ops.All]: createCompiler(compiledArgs => `(${compiledArgs.join(` && `)})`),\n  [Ops.Not]: createCompiler(([value]) => `(!${value})`),\n  [Ops.Equal]: createCompiler(([firstValue, secondValue]) => `(${firstValue} == ${secondValue})`),\n  [Ops.NotEqual]: createCompiler(([firstValue, secondValue]) => `(${firstValue} != ${secondValue})`),\n  [Ops.GreaterThan]: createCompiler(([firstValue, secondValue]) => `(${firstValue} > ${secondValue})`),\n  [Ops.GreaterThanOrEqualTo]: createCompiler(([firstValue, secondValue]) => `(${firstValue} >= ${secondValue})`),\n  [Ops.LessThan]: createCompiler(([firstValue, secondValue]) => `(${firstValue} < ${secondValue})`),\n  [Ops.LessThanOrEqualTo]: createCompiler(([firstValue, secondValue]) => `(${firstValue} <= ${secondValue})`),\n  [Ops.Multiply]: createCompiler(compiledArgs => `(${compiledArgs.join(' * ')})`),\n  [Ops.Divide]: createCompiler(([firstValue, secondValue]) => `(${firstValue} / ${secondValue})`),\n  [Ops.Add]: createCompiler(compiledArgs => `(${compiledArgs.join(' + ')})`),\n  [Ops.Subtract]: createCompiler(([firstValue, secondValue]) => `(${firstValue} - ${secondValue})`),\n  [Ops.Clamp]: createCompiler(([value, min, max]) => `clamp(${value}, ${min}, ${max})`),\n  [Ops.Mod]: createCompiler(([value, modulo]) => `mod(${value}, ${modulo})`),\n  [Ops.Pow]: createCompiler(([value, power]) => `pow(${value}, ${power})`),\n  [Ops.Abs]: createCompiler(([value]) => `abs(${value})`),\n  [Ops.Floor]: createCompiler(([value]) => `floor(${value})`),\n  [Ops.Ceil]: createCompiler(([value]) => `ceil(${value})`),\n  [Ops.Round]: createCompiler(([value]) => `floor(${value} + 0.5)`),\n  [Ops.Sin]: createCompiler(([value]) => `sin(${value})`),\n  [Ops.Cos]: createCompiler(([value]) => `cos(${value})`),\n  [Ops.Atan]: createCompiler(([firstValue, secondValue]) => {\n    return secondValue !== undefined ? `atan(${firstValue}, ${secondValue})` : `atan(${firstValue})`;\n  }),\n  [Ops.Sqrt]: createCompiler(([value]) => `sqrt(${value})`),\n  [Ops.Match]: createCompiler(compiledArgs => {\n    const input = compiledArgs[0];\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 1; i -= 2) {\n      const match = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.Between]: createCompiler(([value, min, max]) => `(${value} >= ${min} && ${value} <= ${max})`),\n  [Ops.Interpolate]: createCompiler(([exponent, input, ...compiledArgs]) => {\n    let result = '';\n    for (let i = 0; i < compiledArgs.length - 2; i += 2) {\n      const stop1 = compiledArgs[i];\n      const output1 = result || compiledArgs[i + 1];\n      const stop2 = compiledArgs[i + 2];\n      const output2 = compiledArgs[i + 3];\n      let ratio;\n      if (exponent === numberToGlsl(1)) {\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\n      } else {\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\n      }\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\n    }\n    return result;\n  }),\n  [Ops.Case]: createCompiler(compiledArgs => {\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 0; i -= 2) {\n      const condition = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${condition} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.In]: createCompiler(([needle, ...haystack], context) => {\n    const funcName = computeOperatorFunctionName('in', context);\n    const tests = [];\n    for (let i = 0; i < haystack.length; i += 1) {\n      tests.push(`  if (inputValue == ${haystack[i]}) { return true; }`);\n    }\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\n${tests.join('\\n')}\n  return false;\n}`;\n    return `${funcName}(${needle})`;\n  }),\n  [Ops.Array]: createCompiler(args => `vec${args.length}(${args.join(', ')})`),\n  [Ops.Color]: createCompiler(compiledArgs => {\n    if (compiledArgs.length === 1) {\n      //grayscale\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), 1.0)`;\n    }\n    if (compiledArgs.length === 2) {\n      //grayscale with alpha\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), ${compiledArgs[1]})`;\n    }\n    const rgb = compiledArgs.slice(0, 3).map(color => `${color} / 255.0`);\n    if (compiledArgs.length === 3) {\n      return `vec4(${rgb.join(', ')}, 1.0)`;\n    }\n    const alpha = compiledArgs[3];\n    return `vec4(${rgb.join(', ')}, ${alpha})`;\n  }),\n  [Ops.Band]: createCompiler(([band, xOffset, yOffset], context) => {\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      let ifBlocks = '';\n      const bandCount = context.bandCount || 1;\n      for (let i = 0; i < bandCount; i++) {\n        const colorIndex = Math.floor(i / 4);\n        let bandIndex = i % 4;\n        if (i === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\n        ifBlocks += `  if (band == ${i + 1}.0) {\n    return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\n  }\n`;\n      }\n      context.functions[GET_BAND_VALUE_FUNC] = `float getBandValue(float band, float xOffset, float yOffset) {\n  float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\n  float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n${ifBlocks}\n}`;\n    }\n    return `${GET_BAND_VALUE_FUNC}(${band}, ${xOffset ?? '0.0'}, ${yOffset ?? '0.0'})`;\n  }),\n  [Ops.Palette]: (context, expression) => {\n    const [index, ...colors] = expression.args;\n    const numColors = colors.length;\n    const palette = new Uint8Array(numColors * 4);\n    for (let i = 0; i < colors.length; i++) {\n      const parsedValue = /** @type {string | Array<number>} */\n      /** @type {LiteralExpression} */colors[i].value;\n      const color = asArray(parsedValue);\n      const offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\n    const paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    const compiledIndex = compile(index, NumberType, context);\n    return `texture2D(${paletteName}, vec2((${compiledIndex} + 0.5) / ${numColors}.0, 0.5))`;\n  }\n  // TODO: unimplemented\n  // Ops.Number\n  // Ops.String\n  // Ops.Coalesce\n  // Ops.Concat\n  // Ops.ToString\n};\n\n/**\n * @param {Expression} expression The expression.\n * @param {number} returnType The expected return type.\n * @param {CompilationContext} context The compilation context.\n * @return {CompiledExpression} The compiled expression\n */\nfunction compile(expression, returnType, context) {\n  // operator\n  if (expression instanceof CallExpression) {\n    const compiler = compilers[expression.operator];\n    if (compiler === undefined) {\n      throw new Error(`No compiler defined for this operator: ${JSON.stringify(expression.operator)}`);\n    }\n    return compiler(context, expression, returnType);\n  }\n  if ((expression.type & NumberType) > 0) {\n    return numberToGlsl(/** @type {number} */expression.value);\n  }\n  if ((expression.type & BooleanType) > 0) {\n    return expression.value.toString();\n  }\n  if ((expression.type & StringType) > 0) {\n    return stringToGlsl(expression.value.toString());\n  }\n  if ((expression.type & ColorType) > 0) {\n    return colorToGlsl(/** @type {Array<number> | string} */expression.value);\n  }\n  if ((expression.type & NumberArrayType) > 0) {\n    return arrayToGlsl(/** @type {Array<number>} */expression.value);\n  }\n  if ((expression.type & SizeType) > 0) {\n    return sizeToGlsl(/** @type {number|import('../size.js').Size} */expression.value);\n  }\n  throw new Error(`Unexpected expression ${expression.value} (expected type ${typeName(returnType)})`);\n}", "/**\n * @module ol/style/flat\n */\n\n/**\n * @api\n * @fileoverview Vector layers can be styled with an object literal containing properties for\n * stroke, fill, image, and text styles.  The types below can be composed into a single object.\n * For example, a style with both stroke and fill properties could look like this:\n *\n *     const style = {\n *       'stroke-color': 'yellow',\n *       'stroke-width': 1.5,\n *       'fill-color': 'orange',\n *     };\n *\n * See details about the available properties depending on what type of symbolizer should be applied:\n *  {@link module:ol/style/flat~FlatStroke Stroke} - properties for applying a stroke to lines and polygons\n *  {@link module:ol/style/flat~FlatFill Fill} - properties for filling polygons\n *  {@link module:ol/style/flat~FlatText Text} - properties for labeling points, lines, and polygons\n *  {@link module:ol/style/flat~FlatIcon Icon} - properties for rendering points with an icon\n *  {@link module:ol/style/flat~FlatCircle Circle} - properties for rendering points with a circle\n *  {@link module:ol/style/flat~FlatShape Shape} - properties for rendering points with a regular shape\n *\n * To conditionally apply styles based on a filter, a list of {@link module:ol/style/flat~Rule rules} can be used.\n * For example, to style points with a big orange circle if the population is greater than 1 million and\n * a smaller blue circle otherwise:\n *\n *     const rules = [\n *       {\n *         filter: ['>', ['get', 'population'], 1_000_000],\n *         style: {\n *           'circle-radius': 10,\n *           'circle-fill-color': 'red',\n *         }\n *       },\n *       {\n *         else: true,\n *         style: {\n *           'circle-radius': 5,\n *           'circle-fill-color': 'blue',\n *         },\n *       },\n *     ];\n */\n\n/**\n * A literal boolean (e.g. `true`) or an expression that evaluates to a boolean (e.g. `['>', ['get', 'population'], 1_000_000]`).\n *\n * @typedef {boolean|Array} BooleanExpression\n */\n\n/**\n * A literal string (e.g. `'hello'`) or an expression that evaluates to a string (e.g. `['get', 'greeting']`).\n *\n * @typedef {string|Array} StringExpression\n */\n\n/**\n * A literal number (e.g. `42`) or an expression that evaluates to a number (e.g. `['+', 40, 2]`).\n *\n * @typedef {number|Array} NumberExpression\n */\n\n/**\n * A CSS named color (e.g. `'blue'`), an array of 3 RGB values (e.g. `[0, 255, 0]`), an array of 4 RGBA values\n * (e.g. `[0, 255, 0, 0.5]`), or an expression that evaluates to one of these color types (e.g. `['get', 'color']`).\n *\n * @typedef {import(\"../color.js\").Color|string|Array} ColorExpression\n */\n\n/**\n * An array of numbers (e.g. `[1, 2, 3]`) or an expression that evaluates to the same (e.g. `['get', 'values']`).\n *\n * @typedef {Array<number>|Array} NumberArrayExpression\n */\n\n/**\n * An array of two numbers (e.g. `[10, 20]`) or an expression that evaluates to the same (e.g. `['get', 'size']`).\n *\n * @typedef {number|Array<number>|Array} SizeExpression\n */\n\n/**\n * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method\n * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.\n * @api\n *\n * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle\n */\n\n/**\n * A flat style literal or an array of the same.\n *\n * @typedef {FlatStyle|Array<FlatStyle>|Array<Rule>} FlatStyleLike\n */\n\n/**\n * Fill style properties applied to polygon features.\n *\n * @typedef {Object} FlatFill\n * @property {ColorExpression} [fill-color] The fill color. `'none'` means no fill and no hit detection (applies to Canvas only).\n * @property {StringExpression} [fill-pattern-src] Fill pattern image source URI. If `fill-color` is defined as well,\n * it will be used to tint this image. (Expressions only in Canvas)\n * @property {SizeExpression} [fill-pattern-size] Fill pattern image size in pixels.\n * Can be used together with `fill-pattern-offset` to define the sub-rectangle to use\n * from a fill pattern image sprite sheet.\n * @property {SizeExpression} [fill-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original fill pattern image.\n * @property {import(\"./Icon.js\").IconOrigin} [fill-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. (WebGL only)\n */\n\n/**\n * Stroke style properties applied to line strings and polygon boundaries. To apply a stroke, at least one of\n * `stroke-color` or `stroke-width` must be provided.\n *\n * @typedef {Object} FlatStroke\n * @property {ColorExpression} [stroke-color] The stroke color.\n * @property {NumberExpression} [stroke-width] Stroke pixel width.\n * @property {StringExpression} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [stroke-offset] Stroke offset in pixel. A positive value offsets the line to the right,\n * relative to the direction of the line. (WebGL only)\n * @property {string} [stroke-pattern-src] Stroke pattern image source URI. If `stroke-color` is defined as well,\n * it will be used to tint this image. (WebGL only)\n * @property {SizeExpression} [stroke-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin,\n * define the sub-rectangle to use from the original fill pattern image. (WebGL only)\n * @property {import(\"./Icon.js\").IconOrigin} [stroke-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. (WebGL only)\n * @property {SizeExpression} [stroke-pattern-size] Stroke pattern image size in pixel. Can be used together with `stroke-pattern-offset` to define the\n * sub-rectangle to use from the origin (sprite) fill pattern image. (WebGL only)\n * @property {NumberExpression} [stroke-pattern-spacing] Spacing between each pattern occurrence in pixels; 0 if undefined.\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Label style properties applied to all features. At a minimum, a `text-value` must be provided.\n * Note: text style is currently not supported in WebGL layers\n *\n * @typedef {Object} FlatText\n * @property {StringExpression} [text-value] Text content (with `\\n` for line breaks).\n * @property {StringExpression} [text-font='10px sans-serif'] Font style as [CSS `font`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font) value.\n * @property {NumberExpression} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {NumberExpression} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {NumberExpression} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {BooleanExpression} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {StringExpression} [text-placement='point'] Text placement.\n * @property {NumberExpression} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when\n * `text-placement` is set to `'line'`. Overrides `text-align`.\n * @property {SizeExpression} [text-scale] Scale.\n * @property {BooleanExpression} [text-rotate-with-view=false] Whether to rotate the text with the view.\n * @property {NumberExpression} [text-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {StringExpression} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `'text-placement': 'point'`. For `'text-placement': 'line'`, the default is to let the renderer choose a\n * placement where `text-max-angle` is not exceeded.\n * @property {StringExpression} [text-justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `text-justify` is ignored for immediate rendering and also for `'text-placement': 'line'`.\n * @property {StringExpression} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {NumberArrayExpression} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n * @property {ColorExpression} [text-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-background-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-stroke-color] The stroke color.\n * @property {StringExpression} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-stroke-width] Stroke pixel width.\n * @property {ColorExpression} [text-background-stroke-color] The stroke color.\n * @property {StringExpression} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-background-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-background-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-background-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-background-stroke-width] Stroke pixel width.\n * @property {import(\"./Style.js\").DeclutterMode} [text-declutter-mode] Declutter mode\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Icon style properties applied to point features. `icon-src` must be provided to render\n * points with an icon.\n *\n * @typedef {Object} FlatIcon\n * @property {string} [icon-src] Image source URI.\n * @property {NumberArrayExpression} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {ColorExpression} [icon-color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {SizeExpression} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {NumberArrayExpression} [icon-displacement=[0,0]] Displacement of the icon.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {NumberExpression} [icon-opacity=1] Opacity of the icon.\n * @property {SizeExpression} [icon-scale=1] Scale.\n * @property {NumberExpression} [icon-width] Width of the icon. If not specified, the actual image width will be used. Cannot be combined\n * with `scale`. (Expressions only in WebGL)\n * @property {NumberExpression} [icon-height] Height of the icon. If not specified, the actual image height will be used. Cannot be combined\n * with `scale`. (Expressions only in WebGL)\n * @property {NumberExpression} [icon-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [icon-rotate-with-view=false] Whether to rotate the icon with the view. (Expressions only supported in Canvas)\n * @property {SizeExpression} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image. (Expressions only in WebGL)\n * @property {import(\"./Style.js\").DeclutterMode} [icon-declutter-mode] Declutter mode (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * Regular shape style properties for rendering point features. At least `shape-points` must be provided.\n *\n * @typedef {Object} FlatShape\n * @property {NumberExpression} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides. (Expressions only in WebGL)\n * @property {ColorExpression} [shape-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [shape-stroke-color] The stroke color.\n * @property {NumberExpression} [shape-stroke-width] Stroke pixel width.\n * @property {StringExpression} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\n * @property {StringExpression} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\n * @property {NumberArrayExpression} [shape-stroke-line-dash] Line dash pattern. (Canvas only)\n * @property {NumberExpression} [shape-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\n * @property {NumberExpression} [shape-stroke-miter-limit=10] Miter limit. (Canvas only)\n * @property {NumberExpression} [shape-radius] Radius of a regular polygon. (Expressions only in WebGL)\n * @property {NumberExpression} [shape-radius2] Second radius to make a star instead of a regular polygon. (Expressions only in WebGL)\n * @property {NumberExpression} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up. (Expressions only in WebGL)\n * @property {NumberArrayExpression} [shape-displacement=[0,0]] Displacement of the shape\n * @property {NumberExpression} [shape-opacity] Shape opacity. (WebGL only)\n * @property {NumberExpression} [shape-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [shape-rotate-with-view=false] Whether to rotate the shape with the view. (Expression only supported in Canvas)\n * @property {SizeExpression} [shape-scale=1] Scale. Unless two-dimensional scaling is required a better\n * result may be obtained with appropriate settings for `shape-radius` and `shape-radius2`.\n * @property {import(\"./Style.js\").DeclutterMode} [shape-declutter-mode] Declutter mode. (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * Circle style properties for rendering point features. At least `circle-radius` must be provided.\n *\n * @typedef {Object} FlatCircle\n * @property {NumberExpression} [circle-radius] Circle radius.\n * @property {ColorExpression} [circle-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [circle-stroke-color] The stroke color.\n * @property {NumberExpression} [circle-stroke-width] Stroke pixel width.\n * @property {StringExpression} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\n * @property {StringExpression} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\n * @property {NumberArrayExpression} [circle-stroke-line-dash] Line dash pattern. (Canvas only)\n * @property {NumberExpression} [circle-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\n * @property {NumberExpression} [circle-stroke-miter-limit=10] Miter limit. (Canvas only)\n * @property {NumberArrayExpression} [circle-displacement=[0,0]] displacement\n * @property {SizeExpression} [circle-scale=1] Scale. A two-dimensional scale will produce an ellipse.\n * Unless two-dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.\n * @property {NumberExpression} [circle-opacity] Circle opacity. (WebGL only)\n * @property {NumberExpression} [circle-rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two-dimensional scale).\n * @property {BooleanExpression} [circle-rotate-with-view=false] Whether to rotate the shape with the view (Expression only supported in Canvas)\n * (meaningful only when used in conjunction with a two-dimensional scale).\n * @property {import(\"./Style.js\").DeclutterMode} [circle-declutter-mode] Declutter mode (Canvas only)\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\n */\n\n/**\n * These default style properties are applied when no other style is given.\n *\n * @typedef {Object} DefaultStyle\n * @property {string} fill-color `'rgba(255,255,255,0.4)'`\n * @property {string} stroke-color `'#3399CC'`\n * @property {number} stroke-width `1.25`\n * @property {number} circle-radius `5`\n * @property {string} circle-fill-color `'rgba(255,255,255,0.4)'`\n * @property {number} circle-stroke-width `1.25`\n * @property {string} circle-stroke-color `'#3399CC'`\n */\n\n/**\n * @return {DefaultStyle} The default flat style.\n */\nexport function createDefaultStyle() {\n  return {\n    'fill-color': 'rgba(255,255,255,0.4)',\n    'stroke-color': '#3399CC',\n    'stroke-width': 1.25,\n    'circle-radius': 5,\n    'circle-fill-color': 'rgba(255,255,255,0.4)',\n    'circle-stroke-width': 1.25,\n    'circle-stroke-color': '#3399CC'\n  };\n}\n\n/**\n * A rule is used to conditionally apply a style. If the rule's filter evaluates to true,\n * the style will be applied.\n *\n * @typedef {Object} Rule\n * @property {FlatStyle|Array<FlatStyle>} style The style to be applied if the filter matches.\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\n * to determine if a style applies. If no filter is included, the rule always applies\n * (unless it is an else rule).\n * @property {boolean} [else] If true, the rule applies only if no other previous rule applies.\n * If the else rule also has a filter, the rule will not apply if the filter does not match.\n */\n\n/**\n * Style variables are provided as an object. The variables can be read in a {@link import(\"../expr/expression.js\").ExpressionValue style expression}\n * using the `['var', 'varName']` operator.\n * Each variable must hold a literal value (not an expression).\n * @typedef {Object<string, number|Array<number>|string|boolean>} StyleVariables\n */", "/**\n * Class for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\nimport { colorToGlsl, numberToGlsl, stringToGlsl } from '../expr/gpu.js';\nimport { LINESTRING_ANGLE_COSINE_CUTOFF } from '../render/webgl/utils.js';\nimport { createDefaultStyle } from '../style/flat.js';\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform float u_rotation;\nuniform vec4 u_renderExtent;\nuniform vec2 u_patternOrigin;\nuniform float u_depth;\nuniform mediump int u_hitDetection;\n\nconst float PI = 3.141592653589793238;\nconst float TWO_PI = 2.0 * PI;\nfloat currentLineMetric = 0.; // an actual value will be used in the stroke shaders\n`;\nconst DEFAULT_STYLE = createDefaultStyle();\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSymbolSizeExpression('...')\n *   .getSymbolFragmentShader();\n * ```\n *\n * A note on [alpha premultiplication](https://en.wikipedia.org/wiki/Alpha_compositing#Straight_versus_premultiplied):\n * The ShaderBuilder class expects all colors to **not having been alpha-premultiplied!** This is because alpha\n * premultiplication is done at the end of each fragment shader.\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms_ = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes_ = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(DEFAULT_STYLE['circle-radius'])} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolRotationExpression_ = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolColorExpression_ = colorToGlsl(/** @type {string} */DEFAULT_STYLE['circle-fill-color']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression_ = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.symbolRotateWithView_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeColorExpression_ = colorToGlsl(/** @type {string} */DEFAULT_STYLE['stroke-color']);\n\n    /**\n     * @private\n     */\n    this.strokeOffsetExpression_ = '0.';\n\n    /**\n     * @private\n     */\n    this.strokeCapExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeJoinExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeMiterLimitExpression_ = '10.';\n\n    /**\n     * @private\n     */\n    this.strokeDistanceFieldExpression_ = '-1000.';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.fillColorExpression_ = colorToGlsl(/** @type {string} */DEFAULT_STYLE['fill-color']);\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.vertexShaderFunctions_ = [];\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.fragmentShaderFunctions_ = [];\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings_.push({\n      name: name,\n      type: type,\n      expression: expression\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolSizeExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolSizeExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol size expression\n   */\n  getSymbolSizeExpression() {\n    return this.symbolSizeExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotationExpression(expression) {\n    this.symbolRotationExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.symbolOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol offset expression\n   */\n  getSymbolOffsetExpression() {\n    return this.symbolOffsetExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolColorExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol color expression\n   */\n  getSymbolColorExpression() {\n    return this.symbolColorExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression_;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.symbolRotateWithView_ = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke width expression, returning value in pixels\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeWidthExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeWidthExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeColorExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current stroke color expression\n   */\n  getStrokeColorExpression() {\n    return this.strokeColorExpression_;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeOffsetExpression(expression) {\n    this.strokeOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeCapExpression(expression) {\n    this.strokeCapExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line join expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeJoinExpression(expression) {\n    this.strokeJoinExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeMiterLimitExpression(expression) {\n    this.strokeMiterLimitExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeDistanceFieldExpression(expression) {\n    this.strokeDistanceFieldExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Fill color expression, evaluate to `vec4`\n   * @return {ShaderBuilder} the builder object\n   */\n  setFillColorExpression(expression) {\n    this.hasFill_ = true;\n    this.fillColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fill color expression\n   */\n  getFillColorExpression() {\n    return this.fillColorExpression_;\n  }\n  addVertexShaderFunction(code) {\n    if (this.vertexShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.vertexShaderFunctions_.push(code);\n  }\n  addFragmentShaderFunction(code) {\n    if (this.fragmentShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.fragmentShaderFunctions_.push(code);\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolVertexShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_hitColor;\n${this.attributes_.map(function (attribute) {\n      return 'attribute ' + attribute + ';';\n    }).join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 pxToScreen(vec2 coordPx) {\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\n  return scaled;\n}\n\nvec2 screenToPx(vec2 coordScreen) {\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  v_quadSizePx = ${this.symbolSizeExpression_};\n  vec2 halfSizePx = v_quadSizePx * 0.5;\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\n  vec2 offsetPx = centerOffsetPx;\n  if (a_index == 0.0) {\n    offsetPx -= halfSizePx;\n  } else if (a_index == 1.0) {\n    offsetPx += halfSizePx * vec2(1., -1.);\n  } else if (a_index == 2.0) {\n    offsetPx += halfSizePx;\n  } else {\n    offsetPx += halfSizePx * vec2(-1., 1.);\n  }\n  float angle = ${this.symbolRotationExpression_};\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\n  float c = cos(-angle);\n  float s = sin(-angle);\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\n  vec4 texCoord = ${this.texCoordExpression_};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  v_hitColor = a_hitColor;\n  v_angle = angle;\n  c = cos(-v_angle);\n  s = sin(-v_angle);\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\n${this.varyings_.map(function (varying) {\n      return '  ' + varying.name + ' = ' + varying.expression + ';';\n    }).join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolFragmentShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec4 v_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvoid main(void) {\n  if (${this.discardExpression_}) { discard; }\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\n  float c = cos(v_angle);\n  float s = sin(v_angle);\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\n  gl_FragColor = ${this.symbolColorExpression_};\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.05) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a stroke vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeVertexShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_measureStart;\nattribute float a_measureEnd;\nattribute float a_parameters;\nattribute float a_distance;\nattribute vec2 a_joinAngles;\nattribute vec4 a_hitColor;\n${this.attributes_.map(function (attribute) {\n      return 'attribute ' + attribute + ';';\n    }).join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return vec4(screenPos, u_depth, 1.0);\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\n  float halfAngle = joinAngle / 2.0;\n  float c = cos(halfAngle);\n  float s = sin(halfAngle);\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\n  float length = 1.0 / s;\n  return angleBisectorNormal * length;\n}\n\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\n  // if on a cap or the join angle is too high, offset the line along the segment normal\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\n    return point - normal * offsetPx;\n  }\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\n}\n\nvoid main(void) {\n  v_angleStart = a_joinAngles.x;\n  v_angleEnd = a_joinAngles.y;\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\n  currentLineMetric = vertexNumber < 1.5 ? a_measureStart : a_measureEnd;\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\n\n  float lineWidth = ${this.strokeWidthExpression_};\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\n\n  // compute segment start/end in px with offset\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\n  \n  // compute current vertex position\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 joinDirection;\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\n  // if angle is too high, do not make a proper join\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\n  } else {\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\n  }\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\n  gl_Position = pxToScreen(positionPx);\n\n  v_segmentStart = segmentStartPx;\n  v_segmentEnd = segmentEndPx;\n  v_width = lineWidth;\n  v_hitColor = a_hitColor;\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\n  v_measureStart = a_measureStart;\n  v_measureEnd = a_measureEnd;\n${this.varyings_.map(function (varying) {\n      return '  ' + varying.name + ' = ' + varying.expression + ';';\n    }).join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a stroke fragment shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeFragmentShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  vec2 tangent = normalize(end - start);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 startToPoint = point - start;\n  return abs(dot(startToPoint, normal)) - width * 0.5;\n}\n\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  return dot(startToPoint, -tangent);\n}\n\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return buttCapDistanceField(point, start, end) - width * 0.5;\n}\n\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\n  return length(point - start) - width * 0.5 - onSegment;\n}\n\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  float c = cos(joinAngle * 0.5);\n  float s = sin(joinAngle * 0.5);\n  float direction = -sign(sin(joinAngle));\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\n  float radius = width * 0.5 * s;\n  return dot(startToPoint, bisector * direction) - radius;\n}\n\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  float miterLength = 1. / sin(joinAngle * 0.5);\n  float miterLimit = ${this.strokeMiterLimitExpression_};\n  if (miterLength > miterLimit) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  return -1000.;\n}\n\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\n   if (capType == ${stringToGlsl('butt')}) {\n    return buttCapDistanceField(point, start, end);\n  } else if (capType == ${stringToGlsl('square')}) {\n    return squareCapDistanceField(point, start, end, width);\n  }\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\n  if (joinType == ${stringToGlsl('bevel')}) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  } else if (joinType == ${stringToGlsl('miter')}) {\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\n  }\n  return roundJoinDistanceField(point, start, end, width);\n}\n\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\n  if (isCap(joinAngle)) {\n    return capDistanceField(point, start, end, width, capType);\n  }\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\n}\n\nvoid main(void) {\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\n  vec2 startToPoint = currentPoint - v_segmentStart;\n  float lengthToPoint = max(0., min(dot(segmentTangent, startToPoint), segmentLength));\n  float currentLengthPx = lengthToPoint + v_distanceOffsetPx; \n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\n  currentLineMetric = mix(v_measureStart, v_measureEnd, lengthToPoint / segmentLength);\n\n  if (${this.discardExpression_}) { discard; }\n\n  vec4 color = ${this.strokeColorExpression_};\n  float capType = ${this.strokeCapExpression_};\n  float joinType = ${this.strokeJoinExpression_};\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\n  float distance = max(\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\n    max(segmentStartDistance, segmentEndDistance)\n  );\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\n  color.a *= smoothstep(0.5, -0.5, distance);\n  gl_FragColor = color;\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a fill vertex shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillVertexShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nattribute vec2 a_position;\nattribute vec4 a_hitColor;\n${this.attributes_.map(function (attribute) {\n      return 'attribute ' + attribute + ';';\n    }).join('\\n')}\nvarying vec4 v_hitColor;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\n  v_hitColor = a_hitColor;\n${this.varyings_.map(function (varying) {\n      return '  ' + varying.name + ' = ' + varying.expression + ';';\n    }).join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a fill fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillFragmentShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n    return `${COMMON_HEADER}\n${this.uniforms_.map(function (uniform) {\n      return 'uniform ' + uniform + ';';\n    }).join('\\n')}\nvarying vec4 v_hitColor;\n${this.varyings_.map(function (varying) {\n      return 'varying ' + varying.type + ' ' + varying.name + ';';\n    }).join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(pxPos);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n  gl_FragColor = ${this.fillColorExpression_};\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_hitColor;\n  }\n}`;\n  }\n}", "/**\n * @module ol/layer/Heatmap\n */\nimport { createCanvasContext2D } from '../dom.js';\nimport { clamp } from '../math.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { ShaderBuilder } from '../webgl/ShaderBuilder.js';\nimport BaseVector from './BaseVector.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {VectorSourceType} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\n * @extends {BaseVector<FeatureType, VectorSourceType, WebGLPointsLayerRenderer>}\n * @api\n */\nclass Heatmap extends BaseVector {\n  /**\n   * @param {Options<FeatureType, VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n    const weight = options.weight ? options.weight : 'weight';\n\n    /**\n     * @private\n     */\n    this.weightFunction_ = typeof weight === 'string' ?\n    /**\n     * @param {import('../Feature.js').default} feature Feature\n     * @return {any} weight\n     */\n    feature => feature.get(weight) : weight;\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */this.get(Property.BLUR);\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */this.get(Property.GRADIENT);\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */this.get(Property.RADIUS);\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const builder = new ShaderBuilder().addAttribute('float a_weight').addVarying('v_weight', 'float', 'a_weight').addUniform('float u_size').addUniform('float u_blurSlope').setSymbolSizeExpression('vec2(u_size)').setSymbolColorExpression('vec4(smoothstep(0., 1., (1. - length(coordsPx * 2. / v_quadSizePx)) * u_blurSlope) * v_weight)');\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [{\n        name: 'weight',\n        callback: feature => {\n          const weight = this.weightFunction_(feature);\n          return weight !== undefined ? clamp(weight, 0, 1) : 1;\n        }\n      }],\n      uniforms: {\n        u_size: () => {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        },\n        u_blurSlope: () => {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }\n      },\n      hitDetectionEnabled: true,\n      vertexShader: builder.getSymbolVertexShader(),\n      fragmentShader: builder.getSymbolFragmentShader(),\n      postProcesses: [{\n        fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n            uniform float u_opacity;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a * u_opacity;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n        uniforms: {\n          u_gradientTexture: () => this.gradient_,\n          u_opacity: () => this.getOpacity()\n        }\n      }]\n    });\n  }\n\n  /**\n   * @override\n   */\n  renderDeclutter() {}\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.canvas;\n}\nexport default Heatmap;", "/**\n * @module ol/renderer/canvas/VectorImageLayer\n */\nimport RBush from 'rbush';\nimport ImageCanvas from '../../ImageCanvas.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport EventType from '../../events/EventType.js';\nimport { getHeight, getWidth, isEmpty, scaleFromCenter } from '../../extent.js';\nimport { fromResolutionLike } from '../../resolution.js';\nimport { apply, compose, create } from '../../transform.js';\nimport CanvasImageLayerRenderer from './ImageLayer.js';\nimport CanvasVectorLayerRenderer from './VectorLayer.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorImage.js\").default} layer Vector image layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @private\n     * @type {import(\"./VectorLayer.js\").default}\n     */\n    this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.layerImageRatio_ = layer.getImageRatio();\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.coordinateToVectorPixelTransform_ = create();\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.vectorRenderer_.dispose();\n    super.disposeInternal();\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    if (!this.vectorRenderer_) {\n      return Promise.resolve([]);\n    }\n    const vectorPixel = apply(this.coordinateToVectorPixelTransform_, apply(this.renderedPixelToCoordinateTransform_, pixel.slice()));\n    return this.vectorRenderer_.getFeatures(vectorPixel);\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    this.vectorRenderer_.handleFontsChanged();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n    const hints = frameState.viewHints;\n    const vectorRenderer = this.vectorRenderer_;\n    let renderedExtent = frameState.extent;\n    if (this.layerImageRatio_ !== 1) {\n      renderedExtent = renderedExtent.slice(0);\n      scaleFromCenter(renderedExtent, this.layerImageRatio_);\n    }\n    const width = getWidth(renderedExtent) / viewResolution;\n    const height = getHeight(renderedExtent) / viewResolution;\n    if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty(renderedExtent)) {\n      vectorRenderer.useContainer(null, null);\n      const context = vectorRenderer.context;\n      const layerState = frameState.layerStatesArray[frameState.layerIndex];\n      const imageLayerState = Object.assign({}, layerState, {\n        opacity: 1\n      });\n      const imageFrameState = /** @type {import(\"../../Map.js\").FrameState} */\n      Object.assign({}, frameState, {\n        extent: renderedExtent,\n        size: [width, height],\n        viewState: (/** @type {import(\"../../View.js\").State} */\n        Object.assign({}, frameState.viewState, {\n          rotation: 0\n        })),\n        layerStatesArray: [imageLayerState],\n        layerIndex: 0,\n        declutter: null\n      });\n      const declutter = this.getLayer().getDeclutter();\n      if (declutter) {\n        imageFrameState.declutter = {\n          [declutter]: new RBush(9)\n        };\n      }\n      let emptyImage = true;\n      const image = new ImageCanvas(renderedExtent, viewResolution, pixelRatio, context.canvas, function (callback) {\n        if (vectorRenderer.prepareFrame(imageFrameState) && vectorRenderer.replayGroupChanged) {\n          vectorRenderer.clipping = false;\n          if (vectorRenderer.renderFrame(imageFrameState, null)) {\n            vectorRenderer.renderDeclutter(imageFrameState);\n            vectorRenderer.renderDeferred(imageFrameState);\n            emptyImage = false;\n          }\n          callback();\n        }\n      });\n      image.addEventListener(EventType.CHANGE, () => {\n        if (image.getState() !== ImageState.LOADED) {\n          return;\n        }\n        this.image = emptyImage ? null : image;\n        const imagePixelRatio = image.getPixelRatio();\n        const renderedResolution = fromResolutionLike(image.getResolution()) * pixelRatio / imagePixelRatio;\n        this.renderedResolution = renderedResolution;\n        this.coordinateToVectorPixelTransform_ = compose(this.coordinateToVectorPixelTransform_, width / 2, height / 2, 1 / renderedResolution, -1 / renderedResolution, 0, -viewState.center[0], -viewState.center[1]);\n      });\n      image.load();\n    }\n    if (this.image) {\n      this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();\n    }\n    return !!this.image;\n  }\n\n  /**\n   * @override\n   */\n  preRender() {}\n\n  /**\n   * @override\n   */\n  postRender() {}\n\n  /**\n   */\n  renderDeclutter() {}\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    if (this.vectorRenderer_) {\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches);\n    }\n    return super.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches);\n  }\n}\nexport default CanvasVectorImageLayerRenderer;", "/**\n * @module ol/layer/VectorImage\n */\nimport CanvasVectorImageLayerRenderer from '../renderer/canvas/VectorImageLayer.js';\nimport BaseVectorLayer from './BaseVector.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text on this layer. Any truthy value will enable\n * decluttering. The priority is defined by the `zIndex` of the style and the render order of features. Higher z-index means higher\n * priority. Within the same z-index, a feature rendered before another has higher priority. Items will\n * not be decluttered against or together with items on other layers with the same `declutter` value. If\n * that is needed, use {@link import(\"../layer/Vector.js\").default} instead.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the\n * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Vector data is rendered client-side, to an image. This layer type provides great performance\n * during panning and zooming, but point symbols and texts are always rotated with the view and\n * pixels are scaled during zoom animations. For more accurate rendering of vector data, use\n * {@link module:ol/layer/Vector~VectorLayer} instead.\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorImageLayerRenderer>}\n * @api\n */\nclass VectorImageLayer extends BaseVectorLayer {\n  /**\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.imageRatio;\n    super(baseOptions);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.imageRatio_ = options.imageRatio !== undefined ? options.imageRatio : 1;\n  }\n\n  /**\n   * @return {number} Ratio between rendered extent size and viewport extent size.\n   */\n  getImageRatio() {\n    return this.imageRatio_;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasVectorImageLayerRenderer(this);\n  }\n}\nexport default VectorImageLayer;", "/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport { ascending } from '../../array.js';\nimport { wrapX } from '../../coordinate.js';\nimport { boundingExtent, buffer, containsExtent, equals, getIntersection, getTopLeft, intersects } from '../../extent.js';\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup, { DECLUTTER } from '../../render/canvas/ExecutorGroup.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { toSize } from '../../size.js';\nimport { apply as applyTransform, create as createTransform, multiply, reset as resetTransform, scale, scale as scaleTransform, translate as translateTransform } from '../../transform.js';\nimport { getUid } from '../../util.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport CanvasTileLayerRenderer from './TileLayer.js';\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst IMAGE_REPLAYS = {\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\n  'hybrid': ['Polygon', 'LineString'],\n  'vector': []\n};\n\n/**\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\n */\nconst VECTOR_REPLAYS = {\n  'hybrid': ['Image', 'Text', 'Default'],\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default']\n};\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default<import('../../source/VectorTile.js').default<import('../../Feature.js').FeatureLike>>>}\n */\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\n  /**\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\n   * @param {import(\"./TileLayer.js\").Options} options Options.\n   */\n  constructor(layer, options) {\n    super(layer, options);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../../transform\").Transform}\n     */\n    this.renderedPixelToCoordinateTransform_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedOpacity_ = 1;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<ZIndexContext>}\n     */\n    this.tileClipContexts_ = null;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   * @override\n   */\n  drawTile(tile, frameState, x, y, w, h, gutter, transition) {\n    this.updateExecutorGroup_(tile, frameState.pixelRatio, frameState.viewState.projection);\n    if (this.tileImageNeedsRender_(tile)) {\n      this.renderTileImage_(tile, frameState);\n    }\n    super.drawTile(tile, frameState, x, y, w, h, gutter, transition);\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\n   * @override\n   */\n  getTile(z, x, y, frameState) {\n    const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */\n    this.getOrCreateTile(z, x, y, frameState);\n    if (!tile) {\n      return null;\n    }\n    const viewState = frameState.viewState;\n    const resolution = viewState.resolution;\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    if (hifi || !tile.wantedResolution) {\n      tile.wantedResolution = resolution;\n    }\n    return tile;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const layerRevision = this.getLayer().getRevision();\n    if (this.renderedLayerRevision_ !== layerRevision) {\n      this.renderedLayerRevision_ = layerRevision;\n      this.renderedTiles.length = 0;\n    }\n    return super.prepareFrame(frameState);\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateExecutorGroup_(tile, pixelRatio, projection) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const revision = layer.getRevision();\n    const renderOrder = layer.getRenderOrder() || null;\n    const resolution = tile.wantedResolution;\n    const builderState = tile.getReplayState(layer);\n    if (!builderState.dirty && builderState.renderedResolution === resolution && builderState.renderedRevision == revision && builderState.renderedRenderOrder == renderOrder) {\n      return;\n    }\n    const source = layer.getSource();\n    const declutter = !!layer.getDeclutter();\n    const sourceTileGrid = source.getTileGrid();\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\n    const layerUid = getUid(layer);\n    delete tile.hitDetectionImageData[layerUid];\n    tile.executorGroups[layerUid] = [];\n    builderState.dirty = false;\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\n      const sourceTile = sourceTiles[t];\n      if (sourceTile.getState() != TileState.LOADED) {\n        continue;\n      }\n      const sourceTileCoord = sourceTile.tileCoord;\n      const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      const builderExtent = buffer(sharedExtent, layer.getRenderBuffer() * resolution, this.tempExtent);\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null : builderExtent;\n      const builderGroup = new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio);\n      const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @param {number} [index] Render order index.\n       * @this {CanvasVectorTileLayerRenderer}\n       */\n      const render = function (feature, index) {\n        let styles;\n        const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup, declutter, index);\n          builderState.dirty = builderState.dirty || dirty;\n        }\n      };\n      const features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        const feature = features[i];\n        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n          render.call(this, feature, i);\n        }\n      }\n      const executorGroupInstructions = builderGroup.finish();\n      // no need to clip when the render tile is covered by a single source tile\n      const replayExtent = layer.getRenderMode() !== 'vector' && declutter && sourceTiles.length === 1 ? null : sharedExtent;\n      const renderingReplayGroup = new CanvasExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer(), true);\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\n    }\n    builderState.renderedRevision = revision;\n    builderState.renderedRenderOrder = renderOrder;\n    builderState.renderedResolution = resolution;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    const layer = this.getLayer();\n    const source = layer.getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const hitExtent = boundingExtent([coordinate]);\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position.\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      let key = feature.getId();\n      if (key === undefined) {\n        key = getUid(feature);\n      }\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    const renderedTiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    const layerUid = getUid(layer);\n    const declutter = layer.getDeclutter();\n    const declutteredFeatures = declutter ? frameState.declutter?.[declutter]?.all().map(item => item.value) : null;\n    let found;\n    foundFeature: for (let i = 0, ii = renderedTiles.length; i < ii; ++i) {\n      const tile = renderedTiles[i];\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      if (!intersects(tileExtent, hitExtent)) {\n        continue;\n      }\n      const executorGroups = tile.executorGroups[layerUid];\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        found = executorGroups[t].forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);\n        if (found) {\n          break foundFeature;\n        }\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature.js\").FeatureLike>>} Promise that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    if (this.renderedTiles.length === 0) {\n      return Promise.resolve([]);\n    }\n    return new Promise((resolve, reject) => {\n      const layer = this.getLayer();\n      const source = layer.getSource();\n      const projection = this.renderedProjection;\n      const projectionExtent = projection.getExtent();\n      const resolution = this.renderedResolution;\n      const tileGrid = source.getTileGridForProjection(projection);\n      const coordinate = applyTransform(this.renderedPixelToCoordinateTransform_, pixel.slice());\n      const tileCoordString = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution).toString();\n      const tile = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */this.renderedTiles.find(tile => tile.tileCoord.toString() === tileCoordString && tile.getState() === TileState.LOADED);\n      if (!tile || tile.loadingSourceTiles > 0) {\n        resolve([]);\n        return;\n      }\n      if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, tileGrid.getTileCoordExtent(tile.tileCoord))) {\n        wrapX(coordinate, projection);\n      }\n      const layerUid = getUid(layer);\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n      const corner = getTopLeft(extent);\n      const tilePixel = [(coordinate[0] - corner[0]) / resolution, (corner[1] - coordinate[1]) / resolution];\n      const features = tile.getSourceTiles().reduce((accumulator, sourceTile) => accumulator.concat(sourceTile.getFeatures()), /** @type {Array<import(\"../../Feature.js\").FeatureLike>} */[]);\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\n      if (!hitDetectionImageData) {\n        const tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution, source.zDirection)));\n        const rotation = this.renderedRotation_;\n        const transforms = [this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0)];\n        hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\n      }\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\n    });\n  }\n\n  /**\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @return {Array<import('../../Feature.js').FeatureLike>} Features.\n   */\n  getFeaturesInExtent(extent) {\n    /** @type {Array<import('../../Feature.js').FeatureLike>} */\n    const features = [];\n    const tileCache = this.getTileCache();\n    if (tileCache.getCount() === 0) {\n      return features;\n    }\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(this.frameState.viewState.projection);\n    const z = tileGrid.getZForResolution(this.renderedResolution);\n    /** @type {Object<string, true>} */\n    const visitedSourceTiles = {};\n    tileCache.forEach(tile => {\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const sourceTiles = tile.getSourceTiles();\n      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n        const sourceTile = sourceTiles[i];\n        const key = sourceTile.getKey();\n        if (key in visitedSourceTiles) {\n          continue;\n        }\n        visitedSourceTiles[key] = true;\n        const tileCoord = sourceTile.tileCoord;\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\n          const tileFeatures = sourceTile.getFeatures();\n          if (tileFeatures) {\n            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {\n              const candidate = tileFeatures[j];\n              const geometry = candidate.getGeometry();\n              if (intersects(extent, geometry.getExtent())) {\n                features.push(candidate);\n              }\n            }\n          }\n        }\n      }\n    });\n    return features;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {\n    const context = this.context;\n    const alpha = context.globalAlpha;\n    context.globalAlpha = layerState.opacity;\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const scaledCanvasSize = [this.context.canvas.width, this.context.canvas.height];\n    const declutter = this.getLayer().getDeclutter();\n    const declutterTree = declutter ? frameState.declutter?.[declutter] : undefined;\n    const layerUid = getUid(this.getLayer());\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\n      const tile = tiles[i];\n      const executorGroups = tile.executorGroups[layerUid];\n      if (executorGroups) {\n        for (let j = executorGroups.length - 1; j >= 0; --j) {\n          executorGroups[j].execute(this.context, scaledCanvasSize, this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, DECLUTTER, declutterTree);\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferredInternal(frameState) {\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    const layerUid = getUid(this.getLayer());\n    const executorGroups = tiles.reduce((acc, tile, index) => {\n      tile.executorGroups[layerUid].forEach(executorGroup => acc.push({\n        executorGroup,\n        index\n      }));\n      return acc;\n    }, /** @type {Array<{executorGroup: CanvasExecutorGroup, index: number}>} */[]);\n    const executorGroupZIndexContexts = executorGroups.map(({\n      executorGroup\n    }) => executorGroup.getDeferredZIndexContexts());\n    /** @type {Object<number, true>} */\n    const usedZIndices = {};\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroupZindexContext = executorGroups[i].executorGroup.getDeferredZIndexContexts();\n      for (const key in executorGroupZindexContext) {\n        usedZIndices[key] = true;\n      }\n    }\n    const zIndexKeys = Object.keys(usedZIndices).map(Number).sort(ascending);\n    zIndexKeys.forEach(zIndex => {\n      executorGroupZIndexContexts.forEach((zIndexContexts, i) => {\n        if (!zIndexContexts[zIndex]) {\n          return;\n        }\n        zIndexContexts[zIndex].forEach(zIndexContext => {\n          const {\n            executorGroup,\n            index\n          } = executorGroups[i];\n          const context = executorGroup.getRenderedContext();\n          const alpha = context.globalAlpha;\n          context.globalAlpha = this.renderedOpacity_;\n          const tileClipContext = this.tileClipContexts_[index];\n          if (tileClipContext) {\n            tileClipContext.draw(context);\n          }\n          zIndexContext.draw(context);\n          if (tileClipContext) {\n            context.restore();\n          }\n          context.globalAlpha = alpha;\n          zIndexContext.clear();\n        });\n        zIndexContexts[zIndex].length = 0;\n      });\n    });\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile The tile\n   * @param {import('../../Map.js').FrameState} frameState Current frame state\n   * @return {import('../../transform.js').Transform} Transform to use to render this tile\n   */\n  getTileRenderTransform(tile, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    const size = frameState.size;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n    const source = this.getLayer().getSource();\n    const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n    const tileCoord = tile.tileCoord;\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\n    const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tempExtent)[0] - tileExtent[0];\n    const transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));\n    return transform;\n  }\n\n  /**\n   * Render the vectors for this layer.\n   * @param {CanvasRenderingContext2D} context Target context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  postRender(context, frameState) {\n    const viewHints = frameState.viewHints;\n    const hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();\n    this.renderedRotation_ = frameState.viewState.rotation;\n    this.renderedOpacity_ = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const renderMode = layer.getRenderMode();\n    const alpha = context.globalAlpha;\n    context.globalAlpha = this.renderedOpacity_;\n    const declutter = layer.getDeclutter();\n    const replayTypes = declutter ? VECTOR_REPLAYS[renderMode].filter(type => !DECLUTTER.includes(type)) : VECTOR_REPLAYS[renderMode];\n    const viewState = frameState.viewState;\n    const rotation = viewState.rotation;\n    const tileSource = layer.getSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n    const tiles = /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */\n    this.renderedTiles;\n    const clips = [];\n    const clipZs = [];\n    const tileClipContexts = [];\n    const layerUid = getUid(layer);\n    let ready = true;\n    for (let i = tiles.length - 1; i >= 0; --i) {\n      const tile = tiles[i];\n      ready = ready && !tile.getReplayState(layer).dirty;\n      const executorGroups = tile.executorGroups[layerUid].filter(group => group.hasExecutors(replayTypes));\n      if (executorGroups.length === 0) {\n        continue;\n      }\n      const transform = this.getTileRenderTransform(tile, frameState);\n      const currentZ = tile.tileCoord[0];\n      let contextSaved = false;\n      // Clip mask for regions in this tile that already filled by a higher z tile\n      const currentClip = executorGroups[0].getClipCoords(transform);\n      let clipContext = context;\n      let tileClipContext;\n      if (currentClip) {\n        tileClipContext = new ZIndexContext();\n        clipContext = tileClipContext.getContext();\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\n          if (z !== currentZ && currentZ < clipZs[j]) {\n            const clip = clips[j];\n            if (intersects([currentClip[0], currentClip[3], currentClip[4], currentClip[7]], [clip[0], clip[3], clip[4], clip[7]])) {\n              if (!contextSaved) {\n                clipContext.save();\n                contextSaved = true;\n              }\n              clipContext.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              clipContext.moveTo(currentClip[0], currentClip[1]);\n              clipContext.lineTo(currentClip[2], currentClip[3]);\n              clipContext.lineTo(currentClip[4], currentClip[5]);\n              clipContext.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              clipContext.moveTo(clip[6], clip[7]);\n              clipContext.lineTo(clip[4], clip[5]);\n              clipContext.lineTo(clip[2], clip[3]);\n              clipContext.lineTo(clip[0], clip[1]);\n              clipContext.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n      }\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\n        const executorGroup = executorGroups[t];\n        executorGroup.execute(context, [context.canvas.width, context.canvas.height], transform, rotation, hifi, replayTypes, frameState.declutter?.[declutter]);\n      }\n      if (contextSaved) {\n        if (clipContext === context) {\n          clipContext.restore();\n        } else {\n          tileClipContexts[i] = tileClipContext;\n        }\n      }\n    }\n    context.globalAlpha = alpha;\n    this.ready = ready;\n    this.tileClipContexts_ = tileClipContexts;\n    if (!frameState.declutter) {\n      this.renderDeferredInternal(frameState);\n    }\n    super.postRender(context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, squaredTolerance, styles, builderGroup, declutter, index) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutter, index) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, undefined, declutter, index);\n    }\n    return loading;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @return {boolean} A new tile image was rendered.\n   * @private\n   */\n  tileImageNeedsRender_(tile) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    if (layer.getRenderMode() === 'vector') {\n      return false;\n    }\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const resolution = tile.wantedResolution;\n    return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision;\n  }\n\n  /**\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\n   * @private\n   */\n  renderTileImage_(tile, frameState) {\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */\n    this.getLayer();\n    const replayState = tile.getReplayState(layer);\n    const revision = layer.getRevision();\n    const executorGroups = tile.executorGroups[getUid(layer)];\n    replayState.renderedTileRevision = revision;\n    const tileCoord = tile.wrappedTileCoord;\n    const z = tileCoord[0];\n    const source = layer.getSource();\n    let pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const tileGrid = source.getTileGridForProjection(projection);\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\n    const renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;\n    const resolution = tileGrid.getResolution(z);\n    const context = tile.getContext();\n\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\n    pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    const renderScale = pixelRatio / renderPixelRatio;\n    if (renderScale !== 1) {\n      const canvasTransform = resetTransform(this.tmpTransform_);\n      scaleTransform(canvasTransform, renderScale, renderScale);\n      context.setTransform.apply(context, canvasTransform);\n    }\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tempExtent);\n    const pixelScale = renderPixelRatio / resolution;\n    const transform = resetTransform(this.tmpTransform_);\n    scaleTransform(transform, pixelScale, -pixelScale);\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\n      const executorGroup = executorGroups[i];\n      executorGroup.execute(context, [context.canvas.width * renderScale, context.canvas.height * renderScale], transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()], null);\n    }\n    replayState.renderedTileResolution = tile.wantedResolution;\n  }\n}\nexport default CanvasVectorTileLayerRenderer;", "/**\n * @module ol/layer/VectorTile\n */\nimport { assert } from '../asserts.js';\nimport CanvasVectorTileLayerRenderer from '../renderer/canvas/VectorTileLayer.js';\nimport BaseVectorLayer from './BaseVector.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} VectorTileLayerOnSignature\n */\n\n/**\n * @typedef {'hybrid' | 'vector'} VectorTileRenderType\n */\n\n/***\n * @template T\n * @typedef {T extends import(\"../source/VectorTile.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\n */\n\n/**\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\n * @template {import(\"../Feature\").FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\n * renderer when getting features from the vector tile for the rendering or hit-detection.\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\n * point symbol or line width.\n * @property {VectorTileRenderType} [renderMode='hybrid'] Render mode for vector tiles:\n *  `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\n *    rotated views, but get lifted above all polygon and line elements.\n *  `'vector'`: Everything is rendered as vectors and the original render order is maintained. Use\n *    this mode for improved performance and visual epxerience on vector tile layers with not too many\n *    rendered features (e.g. for highlighting a subset of features of another layer with the same\n *    source).\n * @property {VectorTileSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\n * layers or groups of layers separately, use different truthy values for `declutter`.\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no\n * background will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\n * will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\n * recreated during interactions. See also `updateWhileAnimating`.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=0] The internal tile cache size.  If too small, this will auto-grow to hold\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * Layer for vector tile data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\n * @extends {BaseVectorLayer<FeatureType, VectorTileSourceType, CanvasVectorTileLayerRenderer>}\n * @api\n */\nclass VectorTileLayer extends BaseVectorLayer {\n  /**\n   * @param {Options<VectorTileSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.preload;\n    const cacheSize = options.cacheSize === undefined ? 0 : options.cacheSize;\n    delete options.cacheSize;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n    const renderMode = options.renderMode || 'hybrid';\n    assert(renderMode == 'hybrid' || renderMode == 'vector', \"`renderMode` must be `'hybrid'` or `'vector'`\");\n\n    /**\n     * @private\n     * @type {VectorTileRenderType}\n     */\n    this.renderMode_ = renderMode;\n    this.setPreload(options.preload ? options.preload : 0);\n    this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n\n    /**\n     * @return {import(\"./Base.js\").BackgroundColor} Background color.\n     * @function\n     * @api\n     */\n    this.getBackground;\n\n    /**\n     * @param {import(\"./Base.js\").BackgroundColor} background Background color.\n     * @function\n     * @api\n     */\n    this.setBackground;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasVectorTileLayerRenderer(this, {\n      cacheSize: this.cacheSize_\n    });\n  }\n\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n   * @api\n   * @override\n   */\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n\n  /**\n   * Get features whose bounding box intersects the provided extent. Only features for cached\n   * tiles for the last rendered zoom level are available in the source. So this method is only\n   * suitable for requesting tiles for extents that are currently rendered.\n   *\n   * Features are returned in random tile order and as they are included in the tiles. This means\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<FeatureType>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    return /** @type {Array<FeatureType>} */ /** @type {*} */this.getRenderer().getFeaturesInExtent(extent);\n  }\n\n  /**\n   * @return {VectorTileRenderType} The render mode.\n   */\n  getRenderMode() {\n    return this.renderMode_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */this.get(TileProperty.PRELOAD);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR);\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n}\nexport default VectorTileLayer;", "/**\n * Utilities for parsing literal style objects\n * @module ol/webgl/styleparser\n */\nimport { assert } from '../asserts.js';\nimport { asArray } from '../color.js';\nimport { BooleanType, ColorType, NumberArrayType, NumberType, SizeType, StringType, computeGeometryType, newParsingContext } from '../expr/expression.js';\nimport { FEATURE_ID_PROPERTY_NAME, GEOMETRY_TYPE_PROPERTY_NAME, buildExpression, getStringNumberEquivalent, newCompilationContext, stringToGlsl, uniformNameForVariable } from '../expr/gpu.js';\nimport { ShaderBuilder } from './ShaderBuilder.js';\n\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a compilation context that\n * will be read and modified during the parsing operation.\n * @param {import(\"../expr/gpu.js\").CompilationContext} compilationContext Compilation context\n * @param {import(\"../expr/expression.js\").EncodedExpression} value Value\n * @param {number} [expectedType] Expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\nexport function expressionToGlsl(compilationContext, value, expectedType) {\n  const parsingContext = newParsingContext();\n  return buildExpression(value, expectedType, parsingContext, compilationContext);\n}\n\n/**\n * Packs all components of a color into a two-floats array\n * @param {import(\"../color.js\").Color|string} color Color as array of numbers or string\n * @return {Array<number>} Vec2 array containing the color in compressed form\n */\nexport function packColor(color) {\n  const array = asArray(color);\n  const r = array[0] * 256;\n  const g = array[1];\n  const b = array[2] * 256;\n  const a = Math.round(array[3] * 255);\n  return [r + g, b + a];\n}\nconst UNPACK_COLOR_FN = `vec4 unpackColor(vec2 packedColor) {\n  return vec4(\n    fract(floor(packedColor[0] / 256.0) / 256.0),\n    fract(packedColor[0] / 256.0),\n    fract(floor(packedColor[1] / 256.0) / 256.0),\n    fract(packedColor[1] / 256.0)\n  );\n}`;\n\n/**\n * @param {number} type Value type\n * @return {1|2|3|4} The amount of components for this value\n */\nfunction getGlslSizeFromType(type) {\n  if (type === ColorType || type === SizeType) {\n    return 2;\n  }\n  if (type === NumberArrayType) {\n    return 4;\n  }\n  return 1;\n}\n\n/**\n * @param {number} type Value type\n * @return {'float'|'vec2'|'vec3'|'vec4'} The corresponding GLSL type for this value\n */\nfunction getGlslTypeFromType(type) {\n  const size = getGlslSizeFromType(type);\n  if (size > 1) {\n    return /** @type {'vec2'|'vec3'|'vec4'} */`vec${size}`;\n  }\n  return 'float';\n}\n\n/**\n * see https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\n * @param {Object|string} input The hash input, either an object or string\n * @return {string} Hash (if the object cannot be serialized, it is based on `getUid`)\n */\nexport function computeHash(input) {\n  const hash = JSON.stringify(input).split('').reduce((prev, curr) => (prev << 5) - prev + curr.charCodeAt(0), 0);\n  return (hash >>> 0).toString();\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {'shape-'|'circle-'|'icon-'} prefix Properties prefix\n */\nfunction parseCommonSymbolProperties(style, builder, vertContext, prefix) {\n  if (`${prefix}radius` in style && prefix !== 'icon-') {\n    let radius = expressionToGlsl(vertContext, style[`${prefix}radius`], NumberType);\n    if (`${prefix}radius2` in style) {\n      const radius2 = expressionToGlsl(vertContext, style[`${prefix}radius2`], NumberType);\n      radius = `max(${radius}, ${radius2})`;\n    }\n    if (`${prefix}stroke-width` in style) {\n      radius = `(${radius} + ${expressionToGlsl(vertContext, style[`${prefix}stroke-width`], NumberType)} * 0.5)`;\n    }\n    builder.setSymbolSizeExpression(`vec2(${radius} * 2. + 0.5)`); // adding some padding for antialiasing\n  }\n  if (`${prefix}scale` in style) {\n    const scale = expressionToGlsl(vertContext, style[`${prefix}scale`], SizeType);\n    builder.setSymbolSizeExpression(`${builder.getSymbolSizeExpression()} * ${scale}`);\n  }\n  if (`${prefix}displacement` in style) {\n    builder.setSymbolOffsetExpression(expressionToGlsl(vertContext, style[`${prefix}displacement`], NumberArrayType));\n  }\n  if (`${prefix}rotation` in style) {\n    builder.setSymbolRotationExpression(expressionToGlsl(vertContext, style[`${prefix}rotation`], NumberType));\n  }\n  if (`${prefix}rotate-with-view` in style) {\n    builder.setSymbolRotateWithView(!!style[`${prefix}rotate-with-view`]);\n  }\n}\n\n/**\n * @param {string} distanceField The distance field expression\n * @param {string|null} fillColor The fill color expression; null if no fill\n * @param {string|null} strokeColor The stroke color expression; null if no stroke\n * @param {string|null} strokeWidth The stroke width expression; null if no stroke\n * @param {string|null} opacity The opacity expression; null if no stroke\n * @return {string} The final color expression, based on the distance field and given params\n */\nfunction getColorFromDistanceField(distanceField, fillColor, strokeColor, strokeWidth, opacity) {\n  let color = 'vec4(0.)';\n  if (fillColor !== null) {\n    color = fillColor;\n  }\n  if (strokeColor !== null && strokeWidth !== null) {\n    const strokeFillRatio = `smoothstep(-${strokeWidth} + 0.63, -${strokeWidth} - 0.58, ${distanceField})`;\n    color = `mix(${strokeColor}, ${color}, ${strokeFillRatio})`;\n  }\n  const shapeOpacity = `(1.0 - smoothstep(-0.63, 0.58, ${distanceField}))`;\n  let result = `${color} * vec4(1.0, 1.0, 1.0, ${shapeOpacity})`;\n  if (opacity !== null) {\n    result = `${result} * vec4(1.0, 1.0, 1.0, ${opacity})`;\n  }\n  return result;\n}\n\n/**\n * This will parse an image property provided by `<prefix>-src`\n * The image size expression in GLSL will be returned\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\n * @param {string} textureId A identifier that will be used in the generated uniforms: `sample2d u_texture<id>` and `vec2 u_texture<id>_size`\n * @return {string} The image size expression\n */\nfunction parseImageProperties(style, builder, uniforms, prefix, textureId) {\n  const image = new Image();\n  image.crossOrigin = style[`${prefix}cross-origin`] === undefined ? 'anonymous' : style[`${prefix}cross-origin`];\n  assert(typeof style[`${prefix}src`] === 'string', `WebGL layers do not support expressions for the ${prefix}src style property`);\n  image.src = /** @type {string} */style[`${prefix}src`];\n\n  // the size is provided asynchronously using a uniform\n  uniforms[`u_texture${textureId}_size`] = () => {\n    return image.complete ? [image.width, image.height] : [0, 0];\n  };\n  builder.addUniform(`vec2 u_texture${textureId}_size`);\n  const size = `u_texture${textureId}_size`;\n  uniforms[`u_texture${textureId}`] = image;\n  builder.addUniform(`sampler2D u_texture${textureId}`);\n  return size;\n}\n\n/**\n * This will parse an image's offset properties provided by `<prefix>-offset`, `<prefix>-offset-origin` and `<prefix>-size`\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\n * @param {import(\"../expr/gpu.js\").CompilationContext} context Shader compilation context (vertex or fragment)\n * @param {string} imageSize Pixel size of the full image as a GLSL expression\n * @param {string} sampleSize Pixel size of the sample in the image as a GLSL expression\n * @return {string} The offset expression\n */\nfunction parseImageOffsetProperties(style, prefix, context, imageSize, sampleSize) {\n  let offsetExpression = expressionToGlsl(context, style[`${prefix}offset`], NumberArrayType);\n  if (`${prefix}offset-origin` in style) {\n    switch (style[`${prefix}offset-origin`]) {\n      case 'top-right':\n        offsetExpression = `vec2(${imageSize}.x, 0.) + ${sampleSize} * vec2(-1., 0.) + ${offsetExpression} * vec2(-1., 1.)`;\n        break;\n      case 'bottom-left':\n        offsetExpression = `vec2(0., ${imageSize}.y) + ${sampleSize} * vec2(0., -1.) + ${offsetExpression} * vec2(1., -1.)`;\n        break;\n      case 'bottom-right':\n        offsetExpression = `${imageSize} - ${sampleSize} - ${offsetExpression}`;\n        break;\n      default: // pass\n    }\n  }\n  return offsetExpression;\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseCircleProperties(style, builder, uniforms, vertContext, fragContext) {\n  // this function takes in screen coordinates in pixels and returns the signed distance field\n  // (0 on the boundary, negative inside the circle, positive outside, values in pixels)\n  fragContext.functions['circleDistanceField'] = `float circleDistanceField(vec2 point, float radius) {\n  return length(point) - radius;\n}`;\n  parseCommonSymbolProperties(style, builder, vertContext, 'circle-');\n\n  // OPACITY\n  let opacity = null;\n  if ('circle-opacity' in style) {\n    opacity = expressionToGlsl(fragContext, style['circle-opacity'], NumberType);\n  }\n\n  // SCALE\n  let currentPoint = 'coordsPx';\n  if ('circle-scale' in style) {\n    const scale = expressionToGlsl(fragContext, style['circle-scale'], SizeType);\n    currentPoint = `coordsPx / ${scale}`;\n  }\n\n  // FILL COLOR\n  let fillColor = null;\n  if ('circle-fill-color' in style) {\n    fillColor = expressionToGlsl(fragContext, style['circle-fill-color'], ColorType);\n  }\n\n  // STROKE COLOR\n  let strokeColor = null;\n  if ('circle-stroke-color' in style) {\n    strokeColor = expressionToGlsl(fragContext, style['circle-stroke-color'], ColorType);\n  }\n\n  // RADIUS\n  let radius = expressionToGlsl(fragContext, style['circle-radius'], NumberType);\n\n  // STROKE WIDTH\n  let strokeWidth = null;\n  if ('circle-stroke-width' in style) {\n    strokeWidth = expressionToGlsl(fragContext, style['circle-stroke-width'], NumberType);\n    radius = `(${radius} + ${strokeWidth} * 0.5)`;\n  }\n\n  // FINAL COLOR\n  const distanceField = `circleDistanceField(${currentPoint}, ${radius})`;\n  const colorExpression = getColorFromDistanceField(distanceField, fillColor, strokeColor, strokeWidth, opacity);\n  builder.setSymbolColorExpression(colorExpression);\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseShapeProperties(style, builder, uniforms, vertContext, fragContext) {\n  fragContext.functions['round'] = `float round(float v) {\n  return sign(v) * floor(abs(v) + 0.5);\n}`;\n\n  // these functions take in screen coordinates in pixels and returns the signed distance field\n  // (0 on the boundary, negative inside the polygon, positive outside, values in pixels)\n  // inspired by https://github.com/zranger1/PixelblazePatterns/blob/master/Toolkit/sdf2d.md#n-sided-regular-polygon\n  fragContext.functions['starDistanceField'] = `float starDistanceField(vec2 point, float numPoints, float radius, float radius2, float angle) {\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\n  float c = cos(startAngle);\n  float s = sin(startAngle);\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\n  float alpha = TWO_PI / numPoints; // the angle of one sector\n  float beta = atan(pointRotated.y, pointRotated.x);\n  float gamma = round(beta / alpha) * alpha; // angle in sector\n  c = cos(-gamma);\n  s = sin(-gamma);\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\n  vec2 tipToPoint = inSector + vec2(-radius, 0.);\n  vec2 edgeNormal = vec2(radius2 * sin(alpha * 0.5), -radius2 * cos(alpha * 0.5) + radius);\n  return dot(normalize(edgeNormal), tipToPoint);\n}`;\n  fragContext.functions['regularDistanceField'] = `float regularDistanceField(vec2 point, float numPoints, float radius, float angle) {\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\n  float c = cos(startAngle);\n  float s = sin(startAngle);\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\n  float alpha = TWO_PI / numPoints; // the angle of one sector\n  float radiusIn = radius * cos(PI / numPoints);\n  float beta = atan(pointRotated.y, pointRotated.x);\n  float gamma = round((beta - alpha * 0.5) / alpha) * alpha + alpha * 0.5; // angle in sector from mid\n  c = cos(-gamma);\n  s = sin(-gamma);\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\n  return inSector.x - radiusIn;\n}`;\n  parseCommonSymbolProperties(style, builder, vertContext, 'shape-');\n\n  // OPACITY\n  let opacity = null;\n  if ('shape-opacity' in style) {\n    opacity = expressionToGlsl(fragContext, style['shape-opacity'], NumberType);\n  }\n\n  // SCALE\n  let currentPoint = 'coordsPx';\n  if ('shape-scale' in style) {\n    const scale = expressionToGlsl(fragContext, style['shape-scale'], SizeType);\n    currentPoint = `coordsPx / ${scale}`;\n  }\n\n  // FILL COLOR\n  let fillColor = null;\n  if ('shape-fill-color' in style) {\n    fillColor = expressionToGlsl(fragContext, style['shape-fill-color'], ColorType);\n  }\n\n  // STROKE COLOR\n  let strokeColor = null;\n  if ('shape-stroke-color' in style) {\n    strokeColor = expressionToGlsl(fragContext, style['shape-stroke-color'], ColorType);\n  }\n\n  // STROKE WIDTH\n  let strokeWidth = null;\n  if ('shape-stroke-width' in style) {\n    strokeWidth = expressionToGlsl(fragContext, style['shape-stroke-width'], NumberType);\n  }\n\n  // SHAPE TYPE\n  const numPoints = expressionToGlsl(fragContext, style['shape-points'], NumberType);\n  let angle = '0.';\n  if ('shape-angle' in style) {\n    angle = expressionToGlsl(fragContext, style['shape-angle'], NumberType);\n  }\n  let shapeField;\n  let radius = expressionToGlsl(fragContext, style['shape-radius'], NumberType);\n  if (strokeWidth !== null) {\n    radius = `${radius} + ${strokeWidth} * 0.5`;\n  }\n  if ('shape-radius2' in style) {\n    let radius2 = expressionToGlsl(fragContext, style['shape-radius2'], NumberType);\n    if (strokeWidth !== null) {\n      radius2 = `${radius2} + ${strokeWidth} * 0.5`;\n    }\n    shapeField = `starDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${radius2}, ${angle})`;\n  } else {\n    shapeField = `regularDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${angle})`;\n  }\n\n  // FINAL COLOR\n  const colorExpression = getColorFromDistanceField(shapeField, fillColor, strokeColor, strokeWidth, opacity);\n  builder.setSymbolColorExpression(colorExpression);\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseIconProperties(style, builder, uniforms, vertContext, fragContext) {\n  // COLOR\n  let color = 'vec4(1.0)';\n  if ('icon-color' in style) {\n    color = expressionToGlsl(fragContext, style['icon-color'], ColorType);\n  }\n\n  // OPACITY\n  if ('icon-opacity' in style) {\n    color = `${color} * vec4(1.0, 1.0, 1.0, ${expressionToGlsl(fragContext, style['icon-opacity'], NumberType)})`;\n  }\n\n  // IMAGE & SIZE\n  const textureId = computeHash(style['icon-src']);\n  const sizeExpression = parseImageProperties(style, builder, uniforms, 'icon-', textureId);\n  builder.setSymbolColorExpression(`${color} * texture2D(u_texture${textureId}, v_texCoord)`).setSymbolSizeExpression(sizeExpression);\n\n  // override size if width/height were specified\n  if ('icon-width' in style && 'icon-height' in style) {\n    builder.setSymbolSizeExpression(`vec2(${expressionToGlsl(vertContext, style['icon-width'], NumberType)}, ${expressionToGlsl(vertContext, style['icon-height'], NumberType)})`);\n  }\n\n  // tex coord\n  if ('icon-offset' in style && 'icon-size' in style) {\n    const sampleSize = expressionToGlsl(vertContext, style['icon-size'], NumberArrayType);\n    const fullsize = builder.getSymbolSizeExpression();\n    builder.setSymbolSizeExpression(sampleSize);\n    const offset = parseImageOffsetProperties(style, 'icon-', vertContext, 'v_quadSizePx', sampleSize);\n    builder.setTextureCoordinateExpression(`(vec4((${offset}).xyxy) + vec4(0., 0., ${sampleSize})) / (${fullsize}).xyxy`);\n  }\n  parseCommonSymbolProperties(style, builder, vertContext, 'icon-');\n  if ('icon-anchor' in style) {\n    const anchor = expressionToGlsl(vertContext, style['icon-anchor'], NumberArrayType);\n    let scale = `1.0`;\n    if (`icon-scale` in style) {\n      scale = expressionToGlsl(vertContext, style[`icon-scale`], SizeType);\n    }\n    let shiftPx;\n    if (style['icon-anchor-x-units'] === 'pixels' && style['icon-anchor-y-units'] === 'pixels') {\n      shiftPx = `${anchor} * ${scale}`;\n    } else if (style['icon-anchor-x-units'] === 'pixels') {\n      shiftPx = `${anchor} * vec2(vec2(${scale}).x, v_quadSizePx.y)`;\n    } else if (style['icon-anchor-y-units'] === 'pixels') {\n      shiftPx = `${anchor} * vec2(v_quadSizePx.x, vec2(${scale}).x)`;\n    } else {\n      shiftPx = `${anchor} * v_quadSizePx`;\n    }\n    // default origin is top-left\n    let offsetPx = `v_quadSizePx * vec2(0.5, -0.5) + ${shiftPx} * vec2(-1., 1.)`;\n    if ('icon-anchor-origin' in style) {\n      switch (style['icon-anchor-origin']) {\n        case 'top-right':\n          offsetPx = `v_quadSizePx * -0.5 + ${shiftPx}`;\n          break;\n        case 'bottom-left':\n          offsetPx = `v_quadSizePx * 0.5 - ${shiftPx}`;\n          break;\n        case 'bottom-right':\n          offsetPx = `v_quadSizePx * vec2(-0.5, 0.5) + ${shiftPx} * vec2(1., -1.)`;\n          break;\n        default: // pass\n      }\n    }\n    builder.setSymbolOffsetExpression(`${builder.getSymbolOffsetExpression()} + ${offsetPx}`);\n  }\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader Builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseStrokeProperties(style, builder, uniforms, vertContext, fragContext) {\n  if ('stroke-color' in style) {\n    builder.setStrokeColorExpression(expressionToGlsl(fragContext, style['stroke-color'], ColorType));\n  }\n  if ('stroke-pattern-src' in style) {\n    const textureId = computeHash(style['stroke-pattern-src']);\n    const sizeExpression = parseImageProperties(style, builder, uniforms, 'stroke-pattern-', textureId);\n    let sampleSizeExpression = sizeExpression;\n    let offsetExpression = 'vec2(0.)';\n    if ('stroke-pattern-offset' in style && 'stroke-pattern-size' in style) {\n      sampleSizeExpression = expressionToGlsl(fragContext, style[`stroke-pattern-size`], NumberArrayType);\n      offsetExpression = parseImageOffsetProperties(style, 'stroke-pattern-', fragContext, sizeExpression, sampleSizeExpression);\n    }\n    let spacingExpression = '0.';\n    if ('stroke-pattern-spacing' in style) {\n      spacingExpression = expressionToGlsl(fragContext, style['stroke-pattern-spacing'], NumberType);\n    }\n    fragContext.functions['sampleStrokePattern'] = `vec4 sampleStrokePattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, float spacingPx, float currentLengthPx, float currentRadiusRatio, float lineWidth) {\n  float currentLengthScaled = currentLengthPx * sampleSize.y / lineWidth;\n  float spacingScaled = spacingPx * sampleSize.y / lineWidth;\n  float uCoordPx = mod(currentLengthScaled, (sampleSize.x + spacingScaled));\n  // make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\n  uCoordPx = clamp(uCoordPx, 0.5, sampleSize.x - 0.5);\n  float vCoordPx = (-currentRadiusRatio * 0.5 + 0.5) * sampleSize.y;\n  vec2 texCoord = (vec2(uCoordPx, vCoordPx) + textureOffset) / textureSize;\n  return texture2D(texture, texCoord);\n}`;\n    const textureName = `u_texture${textureId}`;\n    let tintExpression = '1.';\n    if ('stroke-color' in style) {\n      tintExpression = builder.getStrokeColorExpression();\n    }\n    builder.setStrokeColorExpression(`${tintExpression} * sampleStrokePattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, ${spacingExpression}, currentLengthPx, currentRadiusRatio, v_width)`);\n  }\n  if ('stroke-width' in style) {\n    builder.setStrokeWidthExpression(expressionToGlsl(vertContext, style['stroke-width'], NumberType));\n  }\n  if ('stroke-offset' in style) {\n    builder.setStrokeOffsetExpression(expressionToGlsl(vertContext, style['stroke-offset'], NumberType));\n  }\n  if ('stroke-line-cap' in style) {\n    builder.setStrokeCapExpression(expressionToGlsl(vertContext, style['stroke-line-cap'], StringType));\n  }\n  if ('stroke-line-join' in style) {\n    builder.setStrokeJoinExpression(expressionToGlsl(vertContext, style['stroke-line-join'], StringType));\n  }\n  if ('stroke-miter-limit' in style) {\n    builder.setStrokeMiterLimitExpression(expressionToGlsl(vertContext, style['stroke-miter-limit'], NumberType));\n  }\n  if ('stroke-line-dash' in style) {\n    fragContext.functions['getSingleDashDistance'] = `float getSingleDashDistance(float distance, float radius, float dashOffset, float dashLength, float dashLengthTotal, float capType) {\n  float localDistance = mod(distance, dashLengthTotal);\n  float distanceSegment = abs(localDistance - dashOffset - dashLength * 0.5) - dashLength * 0.5;\n  distanceSegment = min(distanceSegment, dashLengthTotal - localDistance);\n  if (capType == ${stringToGlsl('square')}) {\n    distanceSegment -= v_width * 0.5;\n  } else if (capType == ${stringToGlsl('round')}) {\n    distanceSegment = min(distanceSegment, sqrt(distanceSegment * distanceSegment + radius * radius) - v_width * 0.5);\n  }\n  return distanceSegment;\n}`;\n    let dashPattern = style['stroke-line-dash'].map(v => expressionToGlsl(fragContext, v, NumberType));\n    // if pattern has odd length, concatenate it with itself to be even\n    if (dashPattern.length % 2 === 1) {\n      dashPattern = [...dashPattern, ...dashPattern];\n    }\n    let offsetExpression = '0.';\n    if ('stroke-line-dash-offset' in style) {\n      offsetExpression = expressionToGlsl(vertContext, style['stroke-line-dash-offset'], NumberType);\n    }\n\n    // define a function for this dash specifically\n    const uniqueDashKey = computeHash(style['stroke-line-dash']);\n    const dashFunctionName = `dashDistanceField_${uniqueDashKey}`;\n    const dashLengthsDef = dashPattern.map((v, i) => `float dashLength${i} = ${v};`);\n    const totalLengthDef = dashPattern.map((v, i) => `dashLength${i}`).join(' + ');\n    let currentDashOffset = '0.';\n    let distanceExpression = `getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength0, totalDashLength, capType)`;\n    for (let i = 2; i < dashPattern.length; i += 2) {\n      currentDashOffset = `${currentDashOffset} + dashLength${i - 2} + dashLength${i - 1}`;\n      distanceExpression = `min(${distanceExpression}, getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength${i}, totalDashLength, capType))`;\n    }\n    fragContext.functions[dashFunctionName] = `float ${dashFunctionName}(float distance, float radius, float capType) {\n  ${dashLengthsDef.join('\\n  ')}\n  float totalDashLength = ${totalLengthDef};\n  return ${distanceExpression};\n}`;\n    builder.setStrokeDistanceFieldExpression(`${dashFunctionName}(currentLengthPx + ${offsetExpression}, currentRadiusPx, capType)`);\n  }\n}\n\n/**\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\n * @param {ShaderBuilder} builder Shader Builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseFillProperties(style, builder, uniforms, vertContext, fragContext) {\n  if ('fill-color' in style) {\n    builder.setFillColorExpression(expressionToGlsl(fragContext, style['fill-color'], ColorType));\n  }\n  if ('fill-pattern-src' in style) {\n    const textureId = computeHash(style['fill-pattern-src']);\n    const sizeExpression = parseImageProperties(style, builder, uniforms, 'fill-pattern-', textureId);\n    let sampleSizeExpression = sizeExpression;\n    let offsetExpression = 'vec2(0.)';\n    if ('fill-pattern-offset' in style && 'fill-pattern-size' in style) {\n      sampleSizeExpression = expressionToGlsl(fragContext, style[`fill-pattern-size`], NumberArrayType);\n      offsetExpression = parseImageOffsetProperties(style, 'fill-pattern-', fragContext, sizeExpression, sampleSizeExpression);\n    }\n    fragContext.functions['sampleFillPattern'] = `vec4 sampleFillPattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, vec2 pxOrigin, vec2 pxPosition) {\n  float scaleRatio = pow(2., mod(u_zoom + 0.5, 1.) - 0.5);\n  vec2 pxRelativePos = pxPosition - pxOrigin;\n  // rotate the relative position from origin by the current view rotation\n  pxRelativePos = vec2(pxRelativePos.x * cos(u_rotation) - pxRelativePos.y * sin(u_rotation), pxRelativePos.x * sin(u_rotation) + pxRelativePos.y * cos(u_rotation));\n  // sample position is computed according to the sample offset & size\n  vec2 samplePos = mod(pxRelativePos / scaleRatio, sampleSize);\n  // also make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\n  samplePos = clamp(samplePos, vec2(0.5), sampleSize - vec2(0.5));\n  samplePos.y = sampleSize.y - samplePos.y; // invert y axis so that images appear upright\n  return texture2D(texture, (samplePos + textureOffset) / textureSize);\n}`;\n    const textureName = `u_texture${textureId}`;\n    let tintExpression = '1.';\n    if ('fill-color' in style) {\n      tintExpression = builder.getFillColorExpression();\n    }\n    builder.setFillColorExpression(`${tintExpression} * sampleFillPattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, pxOrigin, pxPos)`);\n  }\n}\n\n/**\n * @typedef {Object} StyleParseResult\n * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").UniformDefinitions} uniforms Uniform definitions\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").AttributeDefinitions} attributes Attribute definitions\n */\n\n/**\n * Parses a {@link import(\"../style/flat.js\").FlatStyle} object and returns a {@link ShaderBuilder}\n * object that has been configured according to the given style, as well as `attributes` and `uniforms`\n * arrays to be fed to the `WebGLPointsRenderer` class.\n *\n * Also returns `uniforms` and `attributes` properties as expected by the\n * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @param {import(\"../style/flat.js\").FlatStyle} style Flat style.\n * @param {import('../style/flat.js').StyleVariables} [variables] Style variables.\n * @param {import(\"../expr/expression.js\").EncodedExpression} [filter] Filter (if any)\n * @return {StyleParseResult} Result containing shader params, attributes and uniforms.\n */\nexport function parseLiteralStyle(style, variables, filter) {\n  const vertContext = newCompilationContext();\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const fragContext = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    variables: vertContext.variables\n  };\n  const builder = new ShaderBuilder();\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n  if ('icon-src' in style) {\n    parseIconProperties(style, builder, uniforms, vertContext, fragContext);\n  } else if ('shape-points' in style) {\n    parseShapeProperties(style, builder, uniforms, vertContext, fragContext);\n  } else if ('circle-radius' in style) {\n    parseCircleProperties(style, builder, uniforms, vertContext, fragContext);\n  }\n  parseStrokeProperties(style, builder, uniforms, vertContext, fragContext);\n  parseFillProperties(style, builder, uniforms, vertContext, fragContext);\n\n  // note that the style filter may have already been applied earlier when building the rendering instructions\n  // this is still needed in case a filter cannot be evaluated statically beforehand (e.g. depending on time)\n  if (filter) {\n    const parsedFilter = expressionToGlsl(fragContext, filter, BooleanType);\n    builder.setFragmentDiscardExpression(`!${parsedFilter}`);\n  }\n\n  // define one uniform per variable\n  for (const varName in fragContext.variables) {\n    const variable = fragContext.variables[varName];\n    const uniformName = uniformNameForVariable(variable.name);\n    let glslType = getGlslTypeFromType(variable.type);\n    if (variable.type === ColorType) {\n      // we're not packing colors when they're passed as uniforms\n      glslType = 'vec4';\n    }\n    builder.addUniform(`${glslType} ${uniformName}`);\n    uniforms[uniformName] = () => {\n      const value = variables[variable.name];\n      if (typeof value === 'number') {\n        return value;\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      if (variable.type === ColorType) {\n        return asArray(value || '#eee');\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      return value;\n    };\n  }\n\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\n  for (const propName in fragContext.properties) {\n    const property = fragContext.properties[propName];\n    if (!vertContext.properties[propName]) {\n      vertContext.properties[propName] = property;\n    }\n    let type = getGlslTypeFromType(property.type);\n    let expression = `a_prop_${property.name}`;\n    if (property.type === ColorType) {\n      type = 'vec4';\n      expression = `unpackColor(${expression})`;\n      builder.addVertexShaderFunction(UNPACK_COLOR_FN);\n    }\n    builder.addVarying(`v_prop_${property.name}`, type, expression);\n  }\n\n  // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.\n  for (const propName in vertContext.properties) {\n    const property = vertContext.properties[propName];\n    builder.addAttribute(`${getGlslTypeFromType(property.type)} a_prop_${property.name}`);\n  }\n\n  // add functions that were collected in the compilation contexts\n  for (const functionName in vertContext.functions) {\n    builder.addVertexShaderFunction(vertContext.functions[functionName]);\n  }\n  for (const functionName in fragContext.functions) {\n    builder.addFragmentShaderFunction(fragContext.functions[functionName]);\n  }\n\n  /**\n   * @type {import('../render/webgl/VectorStyleRenderer.js').AttributeDefinitions}\n   */\n  const attributes = {};\n\n  // Define attributes with their callback for each property used in the vertex shader\n  for (const propName in vertContext.properties) {\n    const property = vertContext.properties[propName];\n    const callback = feature => {\n      const value = feature.get(property.name);\n      if (property.type === ColorType) {\n        return packColor([...asArray(value || '#eee')]);\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      return value;\n    };\n    attributes[`prop_${property.name}`] = {\n      size: getGlslSizeFromType(property.type),\n      callback\n    };\n  }\n\n  // Define attributes for special inputs\n  function defineSpecialInput(contextPropName, glslPropName, type, callback) {\n    const inVertContext = vertContext[contextPropName];\n    const inFragContext = fragContext[contextPropName];\n    if (!inVertContext && !inFragContext) {\n      return;\n    }\n    const glslType = getGlslTypeFromType(type);\n    const attrSize = getGlslSizeFromType(type);\n    builder.addAttribute(`${glslType} a_${glslPropName}`);\n    if (inFragContext) {\n      builder.addVarying(`v_${glslPropName}`, glslType, `a_${glslPropName}`);\n    }\n    attributes[glslPropName] = {\n      size: attrSize,\n      callback\n    };\n  }\n  defineSpecialInput('geometryType', GEOMETRY_TYPE_PROPERTY_NAME, StringType, feature => getStringNumberEquivalent(computeGeometryType(feature.getGeometry())));\n  defineSpecialInput('featureId', FEATURE_ID_PROPERTY_NAME, StringType | NumberType, feature => {\n    const id = feature.getId() ?? null;\n    return typeof id === 'string' ? getStringNumberEquivalent(id) : id;\n  });\n  return {\n    builder,\n    attributes,\n    uniforms\n  };\n}", "/**\n * @module ol/layer/WebGLPoints\n */\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { parseLiteralStyle } from '../webgl/styleparser.js';\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @typedef {Object} Options\n * @property {import('../style/flat.js').FlatStyle} style Literal style to apply to the layer features.\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\n * to determine if a style applies. If no filter is included, the rule always applies.\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLPoints.js\").default#updateStyleVariables} method.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Point source.\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   'circle-radius': 8,\n *   'circle-fill-color': '#33AAFF',\n *   'circle-opacity': 0.9\n * }\n * ```\n *\n * ```js\n * const style = {\n *   'icon-src': '../static/exclamation-mark.png',\n *   'icon-offset': [0, 12],\n *   'icon-width': 4,\n *   'icon-height': 8\n * }\n * ```\n *\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @deprecated Use ol/layer/WebGLVector instead\n */\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} options Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    super(baseOptions);\n\n    /**\n     * @type {import('../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @private\n     * @type {import('../webgl/styleparser.js').StyleParseResult}\n     */\n    this.parseResult_ = parseLiteralStyle(options.style, this.styleVariables_, options.filter);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const attributes = Object.keys(this.parseResult_.attributes).map(name => ({\n      name,\n      ...this.parseResult_.attributes[name]\n    }));\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\n      hitDetectionEnabled: !this.hitDetectionDisabled_,\n      uniforms: this.parseResult_.uniforms,\n      attributes: (/** @type {Array<import('../renderer/webgl/PointsLayer.js').CustomAttribute>} */\n      attributes)\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\nexport default WebGLPointsLayer;", "/**\n * @module ol/layer/WebGLTile\n */\nimport { ColorType, NumberType } from '../expr/expression.js';\nimport { PALETTE_TEXTURE_ARRAY, getStringNumberEquivalent, newCompilationContext, uniformNameForVariable } from '../expr/gpu.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, { Attributes, Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { expressionToGlsl } from '../webgl/styleparser.js';\nimport BaseTileLayer from './BaseTile.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default<import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default>} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    bandCount: bandCount\n  };\n  const pipeline = [];\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(`color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(`color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(`color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`);\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(`Missing variables in style (expected ${context.variables})`);\n  }\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(`uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`);\n  if (context.paletteTextures) {\n    uniformDeclarations.push(`uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`);\n  }\n  const functionDefintions = Object.keys(context.functions).map(function (name) {\n    return context.functions[name];\n  });\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${Uniforms.TILE_TEXTURE_ARRAY}[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n    const style = options.style || {};\n    delete options.style;\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n    this.handleSourceUpdate_();\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_ ? typeof this.sources_ === 'function' ? this.sources_(extent, resolution) : this.sources_ : source ? [source] : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   * @override\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    const source = this.getSource();\n    if (source) {\n      if (source.getState() === 'loading') {\n        const onChange = () => {\n          if (source.getState() === 'ready') {\n            source.removeEventListener('change', onChange);\n            this.setStyle(this.style_);\n          }\n        };\n        source.addEventListener('change', onChange);\n      } else {\n        this.setStyle(this.style_);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0] ? sources[0].bandCount : 4;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.getCacheSize(),\n      paletteTextures: parsedStyle.paletteTextures\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(frameState.extent, this.renderedResolution_).filter(source => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    if (this.hasRenderer()) {\n      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n      const renderer = this.getRenderer();\n      renderer.reset({\n        vertexShader: parsedStyle.vertexShader,\n        fragmentShader: parsedStyle.fragmentShader,\n        uniforms: parsedStyle.uniforms,\n        paletteTextures: parsedStyle.paletteTextures\n      });\n      this.changed();\n    }\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\nexport default WebGLTileLayer;", "/**\n * @module ol/render/webgl/MixedGeometryBatch\n */\nimport { inflateEnds } from '../../geom/flat/orient.js';\nimport RenderFeature from '../../render/Feature.js';\nimport { getUid } from '../../util.js';\n\n/**\n * @typedef {import(\"../../Feature.js\").default} Feature\n */\n/**\n * @typedef {import(\"../../geom/Geometry.js\").Type} GeometryType\n */\n\n/**\n * @typedef {Object} GeometryBatchItem Object that holds a reference to a feature as well as the raw coordinates of its various geometries\n * @property {Feature|RenderFeature} feature Feature\n * @property {Array<Array<number>>} flatCoordss Array of flat coordinates arrays, one for each geometry related to the feature\n * @property {number} [verticesCount] Only defined for linestring and polygon batches\n * @property {number} [ringsCount] Only defined for polygon batches\n * @property {Array<Array<number>>} [ringsVerticesCounts] Array of vertices counts in each ring for each geometry; only defined for polygons batches\n * @property {number} [ref] The reference in the global batch (used for hit detection)\n */\n\n/**\n * @typedef {PointGeometryBatch|LineStringGeometryBatch|PolygonGeometryBatch} GeometryBatch\n */\n\n/**\n * @typedef {Object} PolygonGeometryBatch A geometry batch specific to polygons\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\n * @property {number} ringsCount How many outer and inner rings in this batch.\n */\n\n/**\n * @typedef {Object} LineStringGeometryBatch A geometry batch specific to lines\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\n */\n\n/**\n * @typedef {Object} PointGeometryBatch A geometry batch specific to points\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\n * One entry corresponds to one feature. Key is feature uid.\n * @property {number} geometriesCount Amount of geometries in the batch.\n */\n\n/**\n * @classdesc This class is used to group several geometries of various types together for faster rendering.\n * Three inner batches are maintained for polygons, lines and points. Each time a feature is added, changed or removed\n * from the batch, these inner batches are modified accordingly in order to keep them up-to-date.\n *\n * A feature can be present in several inner batches, for example a polygon geometry will be present in the polygon batch\n * and its linear rings will be present in the line batch. Multi geometries are also broken down into individual geometries\n * and added to the corresponding batches in a recursive manner.\n *\n * Corresponding {@link module:ol/render/webgl/BatchRenderer} instances are then used to generate the render instructions\n * and WebGL buffers (vertices and indices) for each inner batches; render instructions are stored on the inner batches,\n * alongside the transform used to convert world coords to screen coords at the time these instructions were generated.\n * The resulting WebGL buffers are stored on the batches as well.\n *\n * An important aspect of geometry batches is that there is no guarantee that render instructions and WebGL buffers\n * are synchronized, i.e. render instructions can describe a new state while WebGL buffers might not have been written yet.\n * This is why two world-to-screen transforms are stored on each batch: one for the render instructions and one for\n * the WebGL buffers.\n */\nclass MixedGeometryBatch {\n  constructor() {\n    /**\n     * @private\n     */\n    this.globalCounter_ = 0;\n\n    /**\n     * Refs are used as keys for hit detection.\n     * @type {Map<number, Feature|RenderFeature>}\n     * @private\n     */\n    this.refToFeature_ = new Map();\n\n    /**\n     * Features are split in \"entries\", which are individual geometries. We use the following map to share a single ref for all those entries.\n     * @type {Map<string, number>}\n     * @private\n     */\n    this.uidToRef_ = new Map();\n\n    /**\n     * The precision in WebGL shaders is limited.\n     * To keep the refs as small as possible we maintain an array of freed up references.\n     * @type {Array<number>}\n     * @private\n     */\n    this.freeGlobalRef_ = [];\n\n    /**\n     * @type {PolygonGeometryBatch}\n     */\n    this.polygonBatch = {\n      entries: {},\n      geometriesCount: 0,\n      verticesCount: 0,\n      ringsCount: 0\n    };\n\n    /**\n     * @type {PointGeometryBatch}\n     */\n    this.pointBatch = {\n      entries: {},\n      geometriesCount: 0\n    };\n\n    /**\n     * @type {LineStringGeometryBatch}\n     */\n    this.lineStringBatch = {\n      entries: {},\n      geometriesCount: 0,\n      verticesCount: 0\n    };\n  }\n\n  /**\n   * @param {Array<Feature|RenderFeature>} features Array of features to add to the batch\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\n   */\n  addFeatures(features, projectionTransform) {\n    for (let i = 0; i < features.length; i++) {\n      this.addFeature(features[i], projectionTransform);\n    }\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature to add to the batch\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\n   */\n  addFeature(feature, projectionTransform) {\n    let geometry = feature.getGeometry();\n    if (!geometry) {\n      return;\n    }\n    if (projectionTransform) {\n      geometry = geometry.clone();\n      geometry.applyTransform(projectionTransform);\n    }\n    this.addGeometry_(geometry, feature);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInPointBatch_(feature) {\n    const featureUid = getUid(feature);\n    const entry = this.pointBatch.entries[featureUid];\n    if (!entry) {\n      return;\n    }\n    this.pointBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.pointBatch.entries[featureUid];\n    return entry;\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInLineStringBatch_(feature) {\n    const featureUid = getUid(feature);\n    const entry = this.lineStringBatch.entries[featureUid];\n    if (!entry) {\n      return;\n    }\n    this.lineStringBatch.verticesCount -= entry.verticesCount;\n    this.lineStringBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.lineStringBatch.entries[featureUid];\n    return entry;\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   * @return {GeometryBatchItem|void} the cleared entry\n   * @private\n   */\n  clearFeatureEntryInPolygonBatch_(feature) {\n    const featureUid = getUid(feature);\n    const entry = this.polygonBatch.entries[featureUid];\n    if (!entry) {\n      return;\n    }\n    this.polygonBatch.verticesCount -= entry.verticesCount;\n    this.polygonBatch.ringsCount -= entry.ringsCount;\n    this.polygonBatch.geometriesCount -= entry.flatCoordss.length;\n    delete this.polygonBatch.entries[featureUid];\n    return entry;\n  }\n\n  /**\n   * @param {import(\"../../geom.js\").Geometry|RenderFeature} geometry Geometry\n   * @param {Feature|RenderFeature} feature Feature\n   * @private\n   */\n  addGeometry_(geometry, feature) {\n    const type = geometry.getType();\n    switch (type) {\n      case 'GeometryCollection':\n        {\n          const geometries = /** @type {import(\"../../geom.js\").GeometryCollection} */geometry.getGeometriesArray();\n          for (const geometry of geometries) {\n            this.addGeometry_(geometry, feature);\n          }\n          break;\n        }\n      case 'MultiPolygon':\n        {\n          const multiPolygonGeom = /** @type {import(\"../../geom.js\").MultiPolygon} */geometry;\n          this.addCoordinates_(type, multiPolygonGeom.getFlatCoordinates(), multiPolygonGeom.getEndss(), feature, getUid(feature), multiPolygonGeom.getStride());\n          break;\n        }\n      case 'MultiLineString':\n        {\n          const multiLineGeom = /** @type {import(\"../../geom.js\").MultiLineString|RenderFeature} */\n          geometry;\n          this.addCoordinates_(type, multiLineGeom.getFlatCoordinates(), multiLineGeom.getEnds(), feature, getUid(feature), multiLineGeom.getStride());\n          break;\n        }\n      case 'MultiPoint':\n        {\n          const multiPointGeom = /** @type {import(\"../../geom.js\").MultiPoint|RenderFeature} */\n          geometry;\n          this.addCoordinates_(type, multiPointGeom.getFlatCoordinates(), null, feature, getUid(feature), multiPointGeom.getStride());\n          break;\n        }\n      case 'Polygon':\n        {\n          const polygonGeom = /** @type {import(\"../../geom.js\").Polygon|RenderFeature} */\n          geometry;\n          this.addCoordinates_(type, polygonGeom.getFlatCoordinates(), polygonGeom.getEnds(), feature, getUid(feature), polygonGeom.getStride());\n          break;\n        }\n      case 'Point':\n        {\n          const pointGeom = /** @type {import(\"../../geom.js\").Point} */\n          geometry;\n          this.addCoordinates_(type, pointGeom.getFlatCoordinates(), null, feature, getUid(feature), pointGeom.getStride());\n          break;\n        }\n      case 'LineString':\n      case 'LinearRing':\n        {\n          const lineGeom = /** @type {import(\"../../geom.js\").LineString} */\n          geometry;\n          const stride = lineGeom.getStride();\n          this.addCoordinates_(type, lineGeom.getFlatCoordinates(), null, feature, getUid(feature), stride, lineGeom.getLayout?.());\n          break;\n        }\n      default:\n      // pass\n    }\n  }\n\n  /**\n   * @param {GeometryType} type Geometry type\n   * @param {Array<number>} flatCoords Flat coordinates\n   * @param {Array<number> | Array<Array<number>> | null} ends Coordinate ends\n   * @param {Feature|RenderFeature} feature Feature\n   * @param {string} featureUid Feature uid\n   * @param {number} stride Stride\n   * @param {import('../../geom/Geometry.js').GeometryLayout} [layout] Layout\n   * @private\n   */\n  addCoordinates_(type, flatCoords, ends, feature, featureUid, stride, layout) {\n    /** @type {number} */\n    let verticesCount;\n    switch (type) {\n      case 'MultiPolygon':\n        {\n          const multiPolygonEndss = /** @type {Array<Array<number>>} */ends;\n          for (let i = 0, ii = multiPolygonEndss.length; i < ii; i++) {\n            let polygonEnds = multiPolygonEndss[i];\n            const prevPolygonEnds = i > 0 ? multiPolygonEndss[i - 1] : null;\n            const startIndex = prevPolygonEnds ? prevPolygonEnds[prevPolygonEnds.length - 1] : 0;\n            const endIndex = polygonEnds[polygonEnds.length - 1];\n            polygonEnds = startIndex > 0 ? polygonEnds.map(end => end - startIndex) : polygonEnds;\n            this.addCoordinates_('Polygon', flatCoords.slice(startIndex, endIndex), polygonEnds, feature, featureUid, stride, layout);\n          }\n          break;\n        }\n      case 'MultiLineString':\n        {\n          const multiLineEnds = /** @type {Array<number>} */ends;\n          for (let i = 0, ii = multiLineEnds.length; i < ii; i++) {\n            const startIndex = i > 0 ? multiLineEnds[i - 1] : 0;\n            this.addCoordinates_('LineString', flatCoords.slice(startIndex, multiLineEnds[i]), null, feature, featureUid, stride, layout);\n          }\n          break;\n        }\n      case 'MultiPoint':\n        for (let i = 0, ii = flatCoords.length; i < ii; i += stride) {\n          this.addCoordinates_('Point', flatCoords.slice(i, i + 2), null, feature, featureUid, null, null);\n        }\n        break;\n      case 'Polygon':\n        {\n          const polygonEnds = /** @type {Array<number>} */ends;\n          if (feature instanceof RenderFeature) {\n            const multiPolygonEnds = inflateEnds(flatCoords, polygonEnds);\n            if (multiPolygonEnds.length > 1) {\n              this.addCoordinates_('MultiPolygon', flatCoords, multiPolygonEnds, feature, featureUid, stride, layout);\n              return;\n            }\n          }\n          if (!this.polygonBatch.entries[featureUid]) {\n            this.polygonBatch.entries[featureUid] = this.addRefToEntry_(featureUid, {\n              feature: feature,\n              flatCoordss: [],\n              verticesCount: 0,\n              ringsCount: 0,\n              ringsVerticesCounts: []\n            });\n          }\n          verticesCount = flatCoords.length / stride;\n          const ringsCount = ends.length;\n          const ringsVerticesCount = ends.map((end, ind, arr) => ind > 0 ? (end - arr[ind - 1]) / stride : end / stride);\n          this.polygonBatch.verticesCount += verticesCount;\n          this.polygonBatch.ringsCount += ringsCount;\n          this.polygonBatch.geometriesCount++;\n          this.polygonBatch.entries[featureUid].flatCoordss.push(getFlatCoordinatesXY(flatCoords, stride));\n          this.polygonBatch.entries[featureUid].ringsVerticesCounts.push(ringsVerticesCount);\n          this.polygonBatch.entries[featureUid].verticesCount += verticesCount;\n          this.polygonBatch.entries[featureUid].ringsCount += ringsCount;\n          for (let i = 0, ii = polygonEnds.length; i < ii; i++) {\n            const startIndex = i > 0 ? polygonEnds[i - 1] : 0;\n            this.addCoordinates_('LinearRing', flatCoords.slice(startIndex, polygonEnds[i]), null, feature, featureUid, stride, layout);\n          }\n          break;\n        }\n      case 'Point':\n        if (!this.pointBatch.entries[featureUid]) {\n          this.pointBatch.entries[featureUid] = this.addRefToEntry_(featureUid, {\n            feature: feature,\n            flatCoordss: []\n          });\n        }\n        this.pointBatch.geometriesCount++;\n        this.pointBatch.entries[featureUid].flatCoordss.push(flatCoords);\n        break;\n      case 'LineString':\n      case 'LinearRing':\n        if (!this.lineStringBatch.entries[featureUid]) {\n          this.lineStringBatch.entries[featureUid] = this.addRefToEntry_(featureUid, {\n            feature: feature,\n            flatCoordss: [],\n            verticesCount: 0\n          });\n        }\n        verticesCount = flatCoords.length / stride;\n        this.lineStringBatch.verticesCount += verticesCount;\n        this.lineStringBatch.geometriesCount++;\n        this.lineStringBatch.entries[featureUid].flatCoordss.push(getFlatCoordinatesXYM(flatCoords, stride, layout));\n        this.lineStringBatch.entries[featureUid].verticesCount += verticesCount;\n        break;\n      default:\n      // pass\n    }\n  }\n\n  /**\n   * @param {string} featureUid Feature uid\n   * @param {GeometryBatchItem} entry The entry to add\n   * @return {GeometryBatchItem} the added entry\n   * @private\n   */\n  addRefToEntry_(featureUid, entry) {\n    const currentRef = this.uidToRef_.get(featureUid);\n\n    // the ref starts at 1 to distinguish from white color (no feature)\n    const ref = currentRef || this.freeGlobalRef_.pop() || ++this.globalCounter_;\n    entry.ref = ref;\n    if (!currentRef) {\n      this.refToFeature_.set(ref, entry.feature);\n      this.uidToRef_.set(featureUid, ref);\n    }\n    return entry;\n  }\n\n  /**\n   * Return a ref to the pool of available refs.\n   * @param {number} ref the ref to return\n   * @param {string} featureUid the feature uid\n   * @private\n   */\n  returnRef_(ref, featureUid) {\n    if (!ref) {\n      throw new Error('This feature has no ref: ' + featureUid);\n    }\n    this.refToFeature_.delete(ref);\n    this.uidToRef_.delete(featureUid);\n    this.freeGlobalRef_.push(ref);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   */\n  changeFeature(feature) {\n    this.removeFeature(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      return;\n    }\n    this.addGeometry_(geometry, feature);\n  }\n\n  /**\n   * @param {Feature|RenderFeature} feature Feature\n   */\n  removeFeature(feature) {\n    let entry = this.clearFeatureEntryInPointBatch_(feature);\n    entry = this.clearFeatureEntryInPolygonBatch_(feature) || entry;\n    entry = this.clearFeatureEntryInLineStringBatch_(feature) || entry;\n    if (entry) {\n      this.returnRef_(entry.ref, getUid(entry.feature));\n    }\n  }\n  clear() {\n    this.polygonBatch.entries = {};\n    this.polygonBatch.geometriesCount = 0;\n    this.polygonBatch.verticesCount = 0;\n    this.polygonBatch.ringsCount = 0;\n    this.lineStringBatch.entries = {};\n    this.lineStringBatch.geometriesCount = 0;\n    this.lineStringBatch.verticesCount = 0;\n    this.pointBatch.entries = {};\n    this.pointBatch.geometriesCount = 0;\n    this.globalCounter_ = 0;\n    this.freeGlobalRef_ = [];\n    this.refToFeature_.clear();\n    this.uidToRef_.clear();\n  }\n\n  /**\n   * Resolve the feature associated to a ref.\n   * @param {number} ref Hit detected ref\n   * @return {Feature|RenderFeature} feature\n   */\n  getFeatureFromRef(ref) {\n    return this.refToFeature_.get(ref);\n  }\n  isEmpty() {\n    return this.globalCounter_ === 0;\n  }\n\n  /**\n   * Will return a new instance of this class that only contains the features\n   * for which the provided callback returned true\n   * @param {function((Feature|RenderFeature)): boolean} featureFilter Feature filter callback\n   * @return {MixedGeometryBatch} Filtered geometry batch\n   */\n  filter(featureFilter) {\n    const filtered = new MixedGeometryBatch();\n    for (const feature of this.refToFeature_.values()) {\n      if (featureFilter(feature)) {\n        filtered.addFeature(feature);\n      }\n    }\n    return filtered;\n  }\n}\n\n/**\n * @param {Array<number>} flatCoords Flat coords\n * @param {number} stride Stride\n * @return {Array<number>} Flat coords with only XY components\n */\nfunction getFlatCoordinatesXY(flatCoords, stride) {\n  if (stride === 2) {\n    return flatCoords;\n  }\n  return flatCoords.filter((v, i) => i % stride < 2);\n}\n\n/**\n * @param {Array<number>} flatCoords Flat coords\n * @param {number} stride Stride\n * @param {string} layout Layout\n * @return {Array<number>} Flat coords with only XY components\n */\nfunction getFlatCoordinatesXYM(flatCoords, stride, layout) {\n  if (stride === 3 && layout === 'XYM') {\n    return flatCoords;\n  }\n  // this is XYZM layout\n  if (stride === 4) {\n    return flatCoords.filter((v, i) => i % stride !== 2);\n  }\n  // this is XYZ layout\n  if (stride === 3) {\n    return flatCoords.map((v, i) => i % stride !== 2 ? v : 0);\n  }\n  // this is XY layout\n  return new Array(flatCoords.length * 1.5).fill(0).map((v, i) => i % 3 === 2 ? 0 : flatCoords[Math.round(i / 1.5)]);\n}\nexport default MixedGeometryBatch;", "/**\n * @module ol/render/webgl/renderinstructions\n */\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { apply as applyTransform } from '../../transform.js';\n\n/**\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"./MixedGeometryBatch.js\").GeometryBatchItem} batchEntry Batch item\n * @param {number} currentIndex Current index\n * @return {number} The amount of values pushed\n */\nfunction pushCustomAttributesInRenderInstructions(renderInstructions, customAttributes, batchEntry, currentIndex) {\n  let shift = 0;\n  for (const key in customAttributes) {\n    const attr = customAttributes[key];\n    const value = attr.callback.call(batchEntry, batchEntry.feature);\n    renderInstructions[currentIndex + shift++] = value?.[0] ?? value;\n    if (!attr.size || attr.size === 1) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[1];\n    if (attr.size < 3) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[2];\n    if (attr.size < 4) {\n      continue;\n    }\n    renderInstructions[currentIndex + shift++] = value[3];\n  }\n  return shift;\n}\n\n/**\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @return {number} Cumulated size of all attributes\n */\nexport function getCustomAttributesSize(customAttributes) {\n  return Object.keys(customAttributes).reduce((prev, curr) => prev + (customAttributes[curr].size || 1), 0);\n}\n\n/**\n * Render instructions for lines are structured like so:\n * [ x0, y0, customAttr0, ... , xN, yN, customAttrN ]\n * @param {import(\"./MixedGeometryBatch.js\").PointGeometryBatch} batch Point geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generatePointRenderInstructions(batch, renderInstructions, customAttributes, transform) {\n  // here we anticipate the amount of render instructions for points:\n  // 2 instructions per vertex for position (x and y)\n  // + 1 instruction per vertex per custom attributes\n  const totalInstructionsCount = (2 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\n  if (!renderInstructions || renderInstructions.length !== totalInstructionsCount) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const tmpCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      tmpCoords[0] = batchEntry.flatCoordss[i][0];\n      tmpCoords[1] = batchEntry.flatCoordss[i][1];\n      applyTransform(transform, tmpCoords);\n      renderInstructions[renderIndex++] = tmpCoords[0];\n      renderInstructions[renderIndex++] = tmpCoords[1];\n      renderIndex += pushCustomAttributesInRenderInstructions(renderInstructions, customAttributes, batchEntry, renderIndex);\n    }\n  }\n  return renderInstructions;\n}\n\n/**\n * Render instructions for lines are structured like so:\n * [ customAttr0, ... , customAttrN, numberOfVertices0, x0, y0, ... , xN, yN, numberOfVertices1, ... ]\n * @param {import(\"./MixedGeometryBatch.js\").LineStringGeometryBatch} batch Line String geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generateLineStringRenderInstructions(batch, renderInstructions, customAttributes, transform) {\n  // here we anticipate the amount of render instructions for lines:\n  // 3 instructions per vertex for position (x, y and m)\n  // + 1 instruction per line per custom attributes\n  // + 1 instruction per line (for vertices count)\n  const totalInstructionsCount = 3 * batch.verticesCount + (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\n  if (!renderInstructions || renderInstructions.length !== totalInstructionsCount) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const flatCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      flatCoords.length = batchEntry.flatCoordss[i].length;\n      transform2D(batchEntry.flatCoordss[i], 0, flatCoords.length, 3, transform, flatCoords, 3);\n      renderIndex += pushCustomAttributesInRenderInstructions(renderInstructions, customAttributes, batchEntry, renderIndex);\n\n      // vertices count\n      renderInstructions[renderIndex++] = flatCoords.length / 3;\n\n      // looping on points for positions\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 3) {\n        renderInstructions[renderIndex++] = flatCoords[j];\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\n        renderInstructions[renderIndex++] = flatCoords[j + 2];\n      }\n    }\n  }\n  return renderInstructions;\n}\n\n/**\n * Render instructions for polygons are structured like so:\n * [ customAttr0, ..., customAttrN, numberOfRings, numberOfVerticesInRing0, ..., numberOfVerticesInRingN, x0, y0, ..., xN, yN, numberOfRings,... ]\n * @param {import(\"./MixedGeometryBatch.js\").PolygonGeometryBatch} batch Polygon geometry batch\n * @param {Float32Array} renderInstructions Render instructions\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n * @return {Float32Array} Generated render instructions\n */\nexport function generatePolygonRenderInstructions(batch, renderInstructions, customAttributes, transform) {\n  // here we anticipate the amount of render instructions for polygons:\n  // 2 instructions per vertex for position (x and y)\n  // + 1 instruction per polygon per custom attributes\n  // + 1 instruction per polygon (for vertices count in polygon)\n  // + 1 instruction per ring (for vertices count in ring)\n  const totalInstructionsCount = 2 * batch.verticesCount + (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount + batch.ringsCount;\n  if (!renderInstructions || renderInstructions.length !== totalInstructionsCount) {\n    renderInstructions = new Float32Array(totalInstructionsCount);\n  }\n\n  // loop on features to fill the render instructions\n  const flatCoords = [];\n  let renderIndex = 0;\n  for (const featureUid in batch.entries) {\n    const batchEntry = batch.entries[featureUid];\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\n      flatCoords.length = batchEntry.flatCoordss[i].length;\n      transform2D(batchEntry.flatCoordss[i], 0, flatCoords.length, 2, transform, flatCoords);\n      renderIndex += pushCustomAttributesInRenderInstructions(renderInstructions, customAttributes, batchEntry, renderIndex);\n\n      // ring count\n      renderInstructions[renderIndex++] = batchEntry.ringsVerticesCounts[i].length;\n\n      // vertices count in each ring\n      for (let j = 0, jj = batchEntry.ringsVerticesCounts[i].length; j < jj; j++) {\n        renderInstructions[renderIndex++] = batchEntry.ringsVerticesCounts[i][j];\n      }\n\n      // looping on points for positions\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 2) {\n        renderInstructions[renderIndex++] = flatCoords[j];\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\n      }\n    }\n  }\n  return renderInstructions;\n}", "/**\n * @module ol/render/webgl/VectorStyleRenderer\n */\nimport { buildExpression, newEvaluationContext } from '../../expr/cpu.js';\nimport { BooleanType, computeGeometryType, newParsingContext } from '../../expr/expression.js';\nimport { create as createTransform, makeInverse as makeInverseTransform } from '../../transform.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport { AttributeType } from '../../webgl/Helper.js';\nimport { parseLiteralStyle } from '../../webgl/styleparser.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { WebGLWorkerMessageType } from './constants.js';\nimport { generateLineStringRenderInstructions, generatePointRenderInstructions, generatePolygonRenderInstructions, getCustomAttributesSize } from './renderinstructions.js';\nimport { colorEncodeId } from './utils.js';\nconst tmpColor = [];\n/** @type {Worker|undefined} */\nlet WEBGL_WORKER;\nfunction getWebGLWorker() {\n  if (!WEBGL_WORKER) {\n    WEBGL_WORKER = createWebGLWorker();\n  }\n  return WEBGL_WORKER;\n}\nlet workerMessageCounter = 0;\n\n/**\n * Names of attributes made available to the vertex shader.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const Attributes = {\n  POSITION: 'a_position',\n  INDEX: 'a_index',\n  SEGMENT_START: 'a_segmentStart',\n  SEGMENT_END: 'a_segmentEnd',\n  MEASURE_START: 'a_measureStart',\n  MEASURE_END: 'a_measureEnd',\n  PARAMETERS: 'a_parameters',\n  JOIN_ANGLES: 'a_joinAngles',\n  DISTANCE: 'a_distance'\n};\n\n/**\n * @typedef {Object} AttributeDefinition A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {number} [size] Amount of numerical values composing the attribute, either 1, 2, 3 or 4; in case size is > 1, the return value\n * of the callback should be an array; if unspecified, assumed to be a single float value\n * @property {function(this:import(\"./MixedGeometryBatch.js\").GeometryBatchItem, import(\"../../Feature\").FeatureLike):number|Array<number>} callback This callback computes the numerical value of the\n * attribute for a given feature.\n */\n\n/**\n * @typedef {Object<string, AttributeDefinition>} AttributeDefinitions\n * @typedef {Object<string, import(\"../../webgl/Helper\").UniformValue>} UniformDefinitions\n */\n\n/**\n * @typedef {Object} WebGLBuffers\n * @property {Array<WebGLArrayBuffer>} polygonBuffers Array containing indices and vertices buffers for polygons\n * @property {Array<WebGLArrayBuffer>} lineStringBuffers Array containing indices and vertices buffers for line strings\n * @property {Array<WebGLArrayBuffer>} pointBuffers Array containing indices and vertices buffers for points\n * @property {import(\"../../transform.js\").Transform} invertVerticesTransform Inverse of the transform applied when generating buffers\n */\n\n/**\n * @typedef {Object} RenderInstructions\n * @property {Float32Array|null} polygonInstructions Polygon instructions; null if nothing to render\n * @property {Float32Array|null} lineStringInstructions LineString instructions; null if nothing to render\n * @property {Float32Array|null} pointInstructions Point instructions; null if nothing to render\n */\n\n/**\n * @typedef {Object} ShaderProgram An object containing both shaders (vertex and fragment)\n * @property {string} vertex Vertex shader source\n * @property {string} fragment Fragment shader source\n */\n\n/**\n * @typedef {Object} AsShaders\n * @property {import(\"../../webgl/ShaderBuilder.js\").ShaderBuilder} builder Shader builder with the appropriate presets.\n * @property {AttributeDefinitions} [attributes] Custom attributes made available in the vertex shaders.\n * Default shaders rely on the attributes in {@link Attributes}.\n * @property {UniformDefinitions} [uniforms] Additional uniforms usable in shaders.\n */\n\n/**\n * @typedef {Object} AsRule\n * @property {import('../../style/flat.js').FlatStyle} style Style\n * @property {import(\"../../expr/expression.js\").EncodedExpression} [filter] Filter\n */\n\n/**\n * @typedef {AsRule|AsShaders} VectorStyle\n */\n\n/**\n * @classdesc This class is responsible for:\n * 1. generate WebGL buffers according to a provided style, using a MixedGeometryBatch as input\n * 2. rendering geometries contained in said buffers\n *\n * A layer renderer will typically maintain several of these in order to have several styles rendered separately.\n *\n * A VectorStyleRenderer instance can be created either from a literal style or from shaders using either\n * `VectorStyleRenderer.fromStyle` or `VectorStyleRenderer.fromShaders`. The shaders should not be provided explicitly\n * but instead as a preconfigured ShaderBuilder instance.\n *\n * The `generateBuffers` method returns a promise resolving to WebGL buffers that are intended to be rendered by the\n * same renderer.\n */\nclass VectorStyleRenderer {\n  /**\n   * @param {VectorStyle} styleOrShaders Literal style or custom shaders\n   * @param {import('../../style/flat.js').StyleVariables} variables Style variables\n   * @param {import('../../webgl/Helper.js').default} helper Helper\n   * @param {boolean} [enableHitDetection] Whether to enable the hit detection (needs compatible shader)\n   * @param {import(\"../../expr/expression.js\").ExpressionValue} [filter] Optional filter expression\n   */\n  constructor(styleOrShaders, variables, helper, enableHitDetection, filter) {\n    /**\n     * @private\n     * @type {import('../../webgl/Helper.js').default}\n     */\n    this.helper_;\n\n    /**\n     * @private\n     */\n    this.hitDetectionEnabled_ = !!enableHitDetection;\n    let asShaders = /** @type {AsShaders} */styleOrShaders;\n    const isShaders = 'builder' in styleOrShaders;\n    if (!isShaders) {\n      const asRule = /** @type {AsRule} */styleOrShaders;\n      const parseResult = parseLiteralStyle(asRule.style, variables, asRule.filter);\n      asShaders = {\n        builder: parseResult.builder,\n        attributes: parseResult.attributes,\n        uniforms: parseResult.uniforms\n      };\n    }\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.fillProgram_;\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.strokeProgram_;\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.symbolProgram_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = !!asShaders.builder.getFillVertexShader();\n    if (this.hasFill_) {\n      /**\n       * @private\n       */\n      this.fillVertexShader_ = asShaders.builder.getFillVertexShader();\n      /**\n       * @private\n       */\n      this.fillFragmentShader_ = asShaders.builder.getFillFragmentShader();\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = !!asShaders.builder.getStrokeVertexShader();\n    if (this.hasStroke_) {\n      /**\n       * @private\n       */\n      this.strokeVertexShader_ = asShaders.builder.getStrokeVertexShader();\n      /**\n       * @private\n       */\n      this.strokeFragmentShader_ = asShaders.builder.getStrokeFragmentShader();\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = !!asShaders.builder.getSymbolVertexShader();\n    if (this.hasSymbol_) {\n      /**\n       * @private\n       */\n      this.symbolVertexShader_ = asShaders.builder.getSymbolVertexShader();\n      /**\n       * @private\n       */\n      this.symbolFragmentShader_ = asShaders.builder.getSymbolFragmentShader();\n    }\n\n    /**\n     * @type {function(import('../../Feature.js').FeatureLike): boolean}\n     * @private\n     */\n    this.featureFilter_ = null;\n    if (filter) {\n      this.featureFilter_ = this.computeFeatureFilter(filter);\n    }\n    const hitDetectionAttributes = this.hitDetectionEnabled_ ? {\n      hitColor: {\n        callback() {\n          return colorEncodeId(this.ref, tmpColor);\n        },\n        size: 4\n      }\n    } : {};\n\n    /**\n     * @private\n     */\n    this.customAttributes_ = Object.assign({}, hitDetectionAttributes, asShaders.attributes);\n    /**\n     * @private\n     */\n    this.uniforms_ = asShaders.uniforms;\n    const customAttributesDesc = Object.entries(this.customAttributes_).map(([name, value]) => ({\n      name: `a_${name}`,\n      size: value.size || 1,\n      type: AttributeType.FLOAT\n    }));\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.polygonAttributesDesc_ = [{\n      name: Attributes.POSITION,\n      size: 2,\n      type: AttributeType.FLOAT\n    }, ...customAttributesDesc];\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.lineStringAttributesDesc_ = [{\n      name: Attributes.SEGMENT_START,\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.MEASURE_START,\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.SEGMENT_END,\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.MEASURE_END,\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.JOIN_ANGLES,\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.DISTANCE,\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.PARAMETERS,\n      size: 1,\n      type: AttributeType.FLOAT\n    }, ...customAttributesDesc];\n    /**\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     * @private\n     */\n    this.pointAttributesDesc_ = [{\n      name: Attributes.POSITION,\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: Attributes.INDEX,\n      size: 1,\n      type: AttributeType.FLOAT\n    }, ...customAttributesDesc];\n    this.setHelper(helper);\n  }\n\n  /**\n   * Will apply the style filter when generating geometry batches (if it can be evaluated outside a map context)\n   * @param {import(\"../../expr/expression.js\").ExpressionValue} filter Style filter\n   * @return {function(import('../../Feature.js').FeatureLike): boolean} Feature filter\n   * @private\n   */\n  computeFeatureFilter(filter) {\n    const parsingContext = newParsingContext();\n    /**\n     * @type {import('../../expr/cpu.js').ExpressionEvaluator}\n     */\n    let compiled;\n    try {\n      compiled = buildExpression(filter, BooleanType, parsingContext);\n    } catch {\n      // filter expression failed to compile for CPU: ignore it\n      return null;\n    }\n\n    // do not apply the filter if it depends on map state (e.g. zoom level) or any variable\n    if (parsingContext.mapState || parsingContext.variables.size > 0) {\n      return null;\n    }\n    const evalContext = newEvaluationContext();\n    return feature => {\n      evalContext.properties = feature.getPropertiesInternal();\n      if (parsingContext.featureId) {\n        const id = feature.getId();\n        if (id !== undefined) {\n          evalContext.featureId = id;\n        } else {\n          evalContext.featureId = null;\n        }\n      }\n      evalContext.geometryType = computeGeometryType(feature.getGeometry());\n      return /** @type {boolean} */compiled(evalContext);\n    };\n  }\n\n  /**\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {Promise<WebGLBuffers|null>} A promise resolving to WebGL buffers; returns null if buffers are empty\n   */\n  async generateBuffers(geometryBatch, transform) {\n    let filteredBatch = geometryBatch;\n    if (this.featureFilter_) {\n      filteredBatch = filteredBatch.filter(this.featureFilter_);\n      if (filteredBatch.isEmpty()) {\n        return null;\n      }\n    }\n    const renderInstructions = this.generateRenderInstructions_(filteredBatch, transform);\n    const [polygonBuffers, lineStringBuffers, pointBuffers] = await Promise.all([this.generateBuffersForType_(renderInstructions.polygonInstructions, 'Polygon', transform), this.generateBuffersForType_(renderInstructions.lineStringInstructions, 'LineString', transform), this.generateBuffersForType_(renderInstructions.pointInstructions, 'Point', transform)]);\n    // also return the inverse of the transform that was applied when generating buffers\n    const invertVerticesTransform = makeInverseTransform(createTransform(), transform);\n    return {\n      polygonBuffers: polygonBuffers,\n      lineStringBuffers: lineStringBuffers,\n      pointBuffers: pointBuffers,\n      invertVerticesTransform: invertVerticesTransform\n    };\n  }\n\n  /**\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {RenderInstructions} Render instructions\n   * @private\n   */\n  generateRenderInstructions_(geometryBatch, transform) {\n    const polygonInstructions = this.hasFill_ ? generatePolygonRenderInstructions(geometryBatch.polygonBatch, new Float32Array(0), this.customAttributes_, transform) : null;\n    const lineStringInstructions = this.hasStroke_ ? generateLineStringRenderInstructions(geometryBatch.lineStringBatch, new Float32Array(0), this.customAttributes_, transform) : null;\n    const pointInstructions = this.hasSymbol_ ? generatePointRenderInstructions(geometryBatch.pointBatch, new Float32Array(0), this.customAttributes_, transform) : null;\n    return {\n      polygonInstructions,\n      lineStringInstructions,\n      pointInstructions\n    };\n  }\n\n  /**\n   * @param {Float32Array|null} renderInstructions Render instructions\n   * @param {import(\"../../geom/Geometry.js\").Type} geometryType Geometry type\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\n   * @return {Promise<Array<WebGLArrayBuffer>>|null} Indices buffer and vertices buffer; null if nothing to render\n   * @private\n   */\n  generateBuffersForType_(renderInstructions, geometryType, transform) {\n    if (renderInstructions === null) {\n      return null;\n    }\n    const messageId = workerMessageCounter++;\n    let messageType;\n    switch (geometryType) {\n      case 'Polygon':\n        messageType = WebGLWorkerMessageType.GENERATE_POLYGON_BUFFERS;\n        break;\n      case 'LineString':\n        messageType = WebGLWorkerMessageType.GENERATE_LINE_STRING_BUFFERS;\n        break;\n      case 'Point':\n        messageType = WebGLWorkerMessageType.GENERATE_POINT_BUFFERS;\n        break;\n      default:\n      // pass\n    }\n\n    /** @type {import('./constants.js').WebGLWorkerGenerateBuffersMessage} */\n    const message = {\n      id: messageId,\n      type: messageType,\n      renderInstructions: renderInstructions.buffer,\n      renderInstructionsTransform: transform,\n      customAttributesSize: getCustomAttributesSize(this.customAttributes_)\n    };\n    const WEBGL_WORKER = getWebGLWorker();\n    WEBGL_WORKER.postMessage(message, [renderInstructions.buffer]);\n\n    // leave ownership of render instructions\n    renderInstructions = null;\n    return new Promise(resolve => {\n      /**\n       * @param {*} event Event.\n       */\n      const handleMessage = event => {\n        const received = event.data;\n\n        // this is not the response to our request: skip\n        if (received.id !== messageId) {\n          return;\n        }\n\n        // we've received our response: stop listening\n        WEBGL_WORKER.removeEventListener('message', handleMessage);\n\n        // the helper has disposed in the meantime; the promise will not be resolved\n        if (!this.helper_.getGL()) {\n          return;\n        }\n\n        // copy & flush received buffers to GPU\n        const verticesBuffer = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW).fromArrayBuffer(received.vertexBuffer);\n        const indicesBuffer = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW).fromArrayBuffer(received.indexBuffer);\n        this.helper_.flushBufferData(verticesBuffer);\n        this.helper_.flushBufferData(indicesBuffer);\n        resolve([indicesBuffer, verticesBuffer]);\n      };\n      WEBGL_WORKER.addEventListener('message', handleMessage);\n    });\n  }\n\n  /**\n   * Render the geometries in the given buffers.\n   * @param {WebGLBuffers} buffers WebGL Buffers to draw\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\n   */\n  render(buffers, frameState, preRenderCallback) {\n    this.hasFill_ && this.renderInternal_(buffers.polygonBuffers[0], buffers.polygonBuffers[1], this.fillProgram_, this.polygonAttributesDesc_, frameState, preRenderCallback);\n    this.hasStroke_ && this.renderInternal_(buffers.lineStringBuffers[0], buffers.lineStringBuffers[1], this.strokeProgram_, this.lineStringAttributesDesc_, frameState, preRenderCallback);\n    this.hasSymbol_ && this.renderInternal_(buffers.pointBuffers[0], buffers.pointBuffers[1], this.symbolProgram_, this.pointAttributesDesc_, frameState, preRenderCallback);\n  }\n\n  /**\n   * @param {WebGLArrayBuffer} indicesBuffer Indices buffer\n   * @param {WebGLArrayBuffer} verticesBuffer Vertices buffer\n   * @param {WebGLProgram} program Program\n   * @param {Array<import('../../webgl/Helper.js').AttributeDescription>} attributes Attribute descriptions\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\n   * @private\n   */\n  renderInternal_(indicesBuffer, verticesBuffer, program, attributes, frameState, preRenderCallback) {\n    const renderCount = indicesBuffer.getSize();\n    if (renderCount === 0) {\n      return;\n    }\n    this.helper_.useProgram(program, frameState);\n    this.helper_.bindBuffer(verticesBuffer);\n    this.helper_.bindBuffer(indicesBuffer);\n    this.helper_.enableAttributes(attributes);\n    preRenderCallback();\n    this.helper_.drawElements(0, renderCount);\n  }\n\n  /**\n   * @param {import('../../webgl/Helper.js').default} helper Helper\n   * @param {WebGLBuffers} buffers WebGL Buffers to reload if any\n   */\n  setHelper(helper, buffers = null) {\n    this.helper_ = helper;\n    if (this.hasFill_) {\n      this.fillProgram_ = this.helper_.getProgram(this.fillFragmentShader_, this.fillVertexShader_);\n    }\n    if (this.hasStroke_) {\n      this.strokeProgram_ = this.helper_.getProgram(this.strokeFragmentShader_, this.strokeVertexShader_);\n    }\n    if (this.hasSymbol_) {\n      this.symbolProgram_ = this.helper_.getProgram(this.symbolFragmentShader_, this.symbolVertexShader_);\n    }\n    this.helper_.addUniforms(this.uniforms_);\n    if (buffers) {\n      if (buffers.polygonBuffers) {\n        this.helper_.flushBufferData(buffers.polygonBuffers[0]);\n        this.helper_.flushBufferData(buffers.polygonBuffers[1]);\n      }\n      if (buffers.lineStringBuffers) {\n        this.helper_.flushBufferData(buffers.lineStringBuffers[0]);\n        this.helper_.flushBufferData(buffers.lineStringBuffers[1]);\n      }\n      if (buffers.pointBuffers) {\n        this.helper_.flushBufferData(buffers.pointBuffers[0]);\n        this.helper_.flushBufferData(buffers.pointBuffers[1]);\n      }\n    }\n  }\n}\nexport default VectorStyleRenderer;", "/**\n * @module ol/renderer/webgl/VectorLayer\n */\nimport ViewHint from '../../ViewHint.js';\nimport { assert } from '../../asserts.js';\nimport { listen, unlistenByKey } from '../../events.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport BaseVector from '../../layer/BaseVector.js';\nimport { getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport MixedGeometryBatch from '../../render/webgl/MixedGeometryBatch.js';\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\nimport { breakDownFlatStyle, colorDecodeId } from '../../render/webgl/utils.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform, setFromArray as setFromTransform, translate as translateTransform } from '../../transform.js';\nimport { create as createMat4, fromTransform as mat4FromTransform } from '../../vec/mat4.js';\nimport { DefaultUniform } from '../../webgl/Helper.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport { getWorldParameters } from './worldUtil.js';\nexport const Uniforms = {\n  ...DefaultUniform,\n  RENDER_EXTENT: 'u_renderExtent',\n  // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  GLOBAL_ALPHA: 'u_globalAlpha'\n};\n\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsShaders} StyleAsShaders\n */\n/**\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsRule} StyleAsRule\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat vector style; also accepts shaders\n * @property {Object<string, number|Array<number>|string|boolean>} variables Style variables\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Experimental WebGL vector renderer. Supports polygons, lines and points:\n *  Polygons are broken down into triangles\n *  Lines are rendered as strips of quads\n *  Points are rendered as quads\n *\n * You need to provide vertex and fragment shaders as well as custom attributes for each type of geometry. All shaders\n * can access the uniforms in the {@link module:ol/webgl/Helper~DefaultUniform} enum.\n * The vertex shaders can access the following attributes depending on the geometry type:\n *  For polygons: {@link module:ol/render/webgl/PolygonBatchRenderer~Attributes}\n *  For line strings: {@link module:ol/render/webgl/LineStringBatchRenderer~Attributes}\n *  For points: {@link module:ol/render/webgl/PointBatchRenderer~Attributes}\n *\n * Please note that the fragment shaders output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Note: this uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n */\nclass WebGLVectorLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n  constructor(layer, options) {\n    const uniforms = {\n      [Uniforms.RENDER_EXTENT]: [0, 0, 0, 0],\n      [Uniforms.PATTERN_ORIGIN]: [0, 0],\n      [Uniforms.GLOBAL_ALPHA]: 1\n    };\n    super(layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\n\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n    this.hitRenderTarget_;\n\n    /**\n     * @private\n     */\n    this.sourceRevision_ = -1;\n\n    /**\n     * @private\n     */\n    this.previousExtent_ = createEmpty();\n\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.tmpCoords_ = [0, 0];\n    /**\n     * @private\n     */\n    this.tmpTransform_ = createTransform();\n    /**\n     * @private\n     */\n    this.tmpMat4_ = createMat4();\n\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.currentFrameStateTransform_ = createTransform();\n\n    /**\n     * @type {import('../../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = {};\n\n    /**\n     * @type {Array<StyleAsRule | StyleAsShaders>}\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {Array<VectorStyleRenderer>}\n     * @private\n     */\n    this.styleRenderers_ = [];\n\n    /**\n     * @type {Array<import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers>}\n     * @private\n     */\n    this.buffers_ = [];\n    this.applyOptions_(options);\n\n    /**\n     * @private\n     */\n    this.batch_ = new MixedGeometryBatch();\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.initialFeaturesAdded_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../events.js\").EventsKey|null>}\n     */\n    this.sourceListenKeys_ = null;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  addInitialFeatures_(frameState) {\n    const source = this.getLayer().getSource();\n    const userProjection = getUserProjection();\n    let projectionTransform;\n    if (userProjection) {\n      projectionTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n    }\n    this.batch_.addFeatures(source.getFeatures(), projectionTransform);\n    this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, this.handleSourceFeatureAdded_.bind(this, projectionTransform)), listen(source, VectorEventType.CHANGEFEATURE, this.handleSourceFeatureChanged_, this), listen(source, VectorEventType.REMOVEFEATURE, this.handleSourceFeatureDelete_, this), listen(source, VectorEventType.CLEAR, this.handleSourceFeatureClear_, this)];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @private\n   */\n  applyOptions_(options) {\n    this.styleVariables_ = options.variables;\n    this.styles_ = breakDownFlatStyle(options.style);\n  }\n\n  /**\n   * @private\n   */\n  createRenderers_() {\n    this.buffers_ = [];\n    this.styleRenderers_ = this.styles_.map(style => new VectorStyleRenderer(style, this.styleVariables_, this.helper, this.hitDetectionEnabled_, 'filter' in style ? style.filter : null));\n  }\n\n  /**\n   * @override\n   */\n  reset(options) {\n    this.applyOptions_(options);\n    if (this.helper) {\n      this.createRenderers_();\n    }\n    super.reset(options);\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    if (this.styleRenderers_.length) {\n      // To reuse buffers\n      this.styleRenderers_.forEach((renderer, i) => renderer.setHelper(this.helper, this.buffers_[i]));\n    } else {\n      this.createRenderers_();\n    }\n    if (this.hitDetectionEnabled_) {\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  }\n\n  /**\n   * @param {import(\"../../proj.js\").TransformFunction} projectionTransform Transform function.\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureAdded_(projectionTransform, event) {\n    const feature = event.feature;\n    this.batch_.addFeature(feature, projectionTransform);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureChanged_(event) {\n    const feature = event.feature;\n    this.batch_.changeFeature(feature);\n  }\n\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceFeatureDelete_(event) {\n    const feature = event.feature;\n    this.batch_.removeFeature(feature);\n  }\n\n  /**\n   * @private\n   */\n  handleSourceFeatureClear_() {\n    this.batch_.clear();\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which geometries are expressed\n   * @private\n   */\n  applyUniforms_(batchInvertTransform) {\n    // world to screen matrix\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\n    this.helper.setUniformMatrixValue(Uniforms.PROJECTION_MATRIX, mat4FromTransform(this.tmpMat4_, this.tmpTransform_));\n\n    // screen to world matrix\n    makeInverseTransform(this.tmpTransform_, this.tmpTransform_);\n    this.helper.setUniformMatrixValue(Uniforms.SCREEN_TO_WORLD_MATRIX, mat4FromTransform(this.tmpMat4_, this.tmpTransform_));\n\n    // pattern origin should always be [0, 0] in world coordinates\n    this.tmpCoords_[0] = 0;\n    this.tmpCoords_[1] = 0;\n    makeInverseTransform(this.tmpTransform_, batchInvertTransform);\n    applyTransform(this.tmpTransform_, this.tmpCoords_);\n    this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN, this.tmpCoords_);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(frameState, this.getLayer());\n\n    // draw the normal canvas\n    this.helper.prepareDraw(frameState);\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    const canvas = this.helper.getCanvas();\n    if (this.hitDetectionEnabled_) {\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\n      this.hitRenderTarget_.clearCachedData();\n    }\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.initialFeaturesAdded_) {\n      this.addInitialFeatures_(frameState);\n      this.initialFeaturesAdded_ = true;\n    }\n    const layer = this.getLayer();\n    const vectorSource = layer.getSource();\n    const viewState = frameState.viewState;\n    const viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      const projection = viewState.projection;\n      const resolution = viewState.resolution;\n      const renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        vectorSource.loadFeatures(toUserExtent(extent, userProjection), toUserResolution(resolution, projection), userProjection);\n      } else {\n        vectorSource.loadFeatures(extent, resolution, projection);\n      }\n      this.ready = false;\n      const transform = this.helper.makeProjectionTransform(frameState, createTransform());\n      const generatePromises = this.styleRenderers_.map((renderer, i) => renderer.generateBuffers(this.batch_, transform).then(buffers => {\n        if (this.buffers_[i]) {\n          this.disposeBuffers(this.buffers_[i]);\n        }\n        this.buffers_[i] = buffers;\n      }));\n      Promise.all(generatePromises).then(() => {\n        this.ready = true;\n        this.getLayer().changed();\n      });\n      this.previousExtent_ = frameState.extent.slice();\n    }\n    return true;\n  }\n\n  /**\n   * Render the world, either to the main framebuffer or to the hit framebuffer\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\n   * @param {number} startWorld the world to render in the first iteration\n   * @param {number} endWorld the last world to render\n   * @param {number} worldWidth the width of the worlds being rendered\n   */\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\n    let world = startWorld;\n    if (forHitDetection) {\n      this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n      this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    }\n    do {\n      this.helper.makeProjectionTransform(frameState, this.currentFrameStateTransform_);\n      translateTransform(this.currentFrameStateTransform_, world * worldWidth, 0);\n      for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\n        const renderer = this.styleRenderers_[i];\n        const buffers = this.buffers_[i];\n        if (!buffers) {\n          continue;\n        }\n        renderer.render(buffers, frameState, () => {\n          this.applyUniforms_(buffers.invertVerticesTransform);\n          this.helper.applyHitDetectionUniform(forHitDetection);\n        });\n      }\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.');\n    if (!this.styleRenderers_.length || !this.hitDetectionEnabled_) {\n      return undefined;\n    }\n    const pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    const ref = colorDecodeId(color);\n    const feature = this.batch_.getFeatureFromRef(ref);\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * Will release a set of Webgl buffers\n   * @param {import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers} buffers Buffers\n   */\n  disposeBuffers(buffers) {\n    /**\n     * @param {Array<import('../../webgl/Buffer.js').default>} typeBuffers Buffers\n     */\n    const disposeBuffersOfType = typeBuffers => {\n      for (const buffer of typeBuffers) {\n        if (buffer) {\n          this.helper.deleteBuffer(buffer);\n        }\n      }\n    };\n    if (buffers.pointBuffers) {\n      disposeBuffersOfType(buffers.pointBuffers);\n    }\n    if (buffers.lineStringBuffers) {\n      disposeBuffersOfType(buffers.lineStringBuffers);\n    }\n    if (buffers.polygonBuffers) {\n      disposeBuffersOfType(buffers.polygonBuffers);\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.buffers_.forEach(buffers => {\n      if (buffers) {\n        this.disposeBuffers(buffers);\n      }\n    });\n    if (this.sourceListenKeys_) {\n      this.sourceListenKeys_.forEach(function (key) {\n        unlistenByKey(key);\n      });\n      this.sourceListenKeys_ = null;\n    }\n    super.disposeInternal();\n  }\n}\nexport default WebGLVectorLayerRenderer;", "/**\n * @module ol/layer/WebGLVector\n */\nimport WebGLVectorLayerRenderer from '../renderer/webgl/VectorLayer.js';\nimport Layer from './Layer.js';\n\n/***\n * @template T\n * @typedef {T extends import(\"../source/Vector.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\n */\n\n/**\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorSourceType>]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * FIXME: not supported yet\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {VectorSourceType} [source] Source.\n * @property {import('../style/flat.js').FlatStyleLike} style Layer style.\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\n * using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLVector.js\").default#updateStyleVariables} method.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * FIXME: not supported yet\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\n * prevent all hit detection on the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer optimized for rendering large vector datasets.\n *\n * **Important: a `WebGLVector` layer must be manually disposed when removed, otherwise the underlying WebGL context\n * will not be garbage collected.**\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorSourceType>]\n * @extends {Layer<VectorSourceType, WebGLVectorLayerRenderer>}\n */\nclass WebGLVectorLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    super(baseOptions);\n\n    /**\n     * @type {import('../style/flat.js').StyleVariables}\n     * @private\n     */\n    this.styleVariables_ = options.variables || {};\n\n    /**\n     * @private\n     */\n    this.style_ = options.style;\n\n    /**\n     * @private\n     */\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new WebGLVectorLayerRenderer(this, {\n      style: this.style_,\n      variables: this.styleVariables_,\n      disableHitDetection: this.hitDetectionDisabled_\n    });\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {import('../style/flat.js').StyleVariables} variables Variables to update.\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n\n  /**\n   * Set the layer style.\n   * @param {import('../style/flat.js').FlatStyleLike} style Layer style.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.clearRenderer();\n    this.changed();\n  }\n}\nexport default WebGLVectorLayer;"],
  "mappings": "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",
  "names": ["asArray", "style", "buffer", "create", "options", "buffer", "create", "EventType_default", "Layer_default", "Layer_default", "create", "equals", "tmpColor", "offset", "buffer", "Layer_default", "create", "Uniforms", "TileLayer_default", "buildExpression", "Uniforms", "equals", "tile", "buildExpression", "scale", "Layer_default", "Uniforms", "TileLayer_default", "geometry", "create", "Attributes", "WEBGL_WORKER", "Uniforms", "Layer_default", "create", "equals", "buffer", "VectorLayer_default", "Layer_default", "VectorLayer_default"]
}
